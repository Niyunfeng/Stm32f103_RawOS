<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\stm32f103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\stm32f103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Thu Oct 08 20:04:16 2015
<BR><P>
<H3>Maximum Stack Usage =        264 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
sys_init_task &rArr; debug_serial_init &rArr; debug_fifo_init &rArr; serial_fifo_init &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[7f]">OS_CPU_SR_Save</a>
 <LI><a href="#[80]">OS_CPU_SR_Restore</a>
 <LI><a href="#[eb]">CPU_IntDis</a>
 <LI><a href="#[ec]">CPU_IntEn</a>
 <LI><a href="#[c0]">raw_start_first_task</a>
 <LI><a href="#[99]">port_task_switch</a>
 <LI><a href="#[b4]">raw_int_switch</a>
 <LI><a href="#[8]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[6]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">SVC_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[85]">remove_ready_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">raw_printf</a><BR>
 <LI><a href="#[87]">mtx_chg_pri</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[84]">change_internal_task_priority</a><BR>
 <LI><a href="#[aa]">release_mutex</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[84]">change_internal_task_priority</a><BR>
 <LI><a href="#[ac]">pend_task_wake_up</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">raw_printf</a><BR>
 <LI><a href="#[b7]">raw_pend_object</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">raw_printf</a><BR>
 <LI><a href="#[7c]">block_state_post_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7d]">raw_printf</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from cpu.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from sys_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from debug_uart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[49]">debug_fifo_read</a> from debug_uart.o(i.debug_fifo_read) referenced from debug_uart.o(i.USART2_IRQHandler)
 <LI><a href="#[4b]">int_msg_handler</a> from raw_task_0.o(i.int_msg_handler) referenced from raw_task_0.o(i.int_msg_init)
 <LI><a href="#[46]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[4c]">raw_idle_task</a> from raw_idle.o(i.raw_idle_task) referenced from raw_sched.o(i.raw_os_init)
 <LI><a href="#[4a]">sys_init_task</a> from sys_init.o(i.sys_init_task) referenced from sys_init.o(i.create_init_task)
 <LI><a href="#[52]">sys_led_init</a> from sys_led.o(i.sys_led_init) referenced from sys_init.o(.constdata)
 <LI><a href="#[50]">sys_led_task</a> from sys_led.o(i.sys_led_task) referenced from sys_led.o(i.sys_led_init)
 <LI><a href="#[4d]">task_0_process</a> from raw_task_0.o(i.task_0_process) referenced from raw_task_0.o(i.raw_task_0_init)
 <LI><a href="#[4e]">task_0_tick_handler</a> from raw_task_0.o(i.task_0_tick_handler) referenced from raw_task_0.o(i.raw_task_0_init)
 <LI><a href="#[51]">tick_task_process</a> from raw_tick.o(i.tick_task_process) referenced from raw_tick.o(i.tick_task_start)
 <LI><a href="#[4f]">timer_task</a> from raw_timer.o(i.timer_task) referenced from raw_timer.o(i.raw_timer_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[48]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[e5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[53]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[e6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[e7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[e8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[e9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[ea]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_in
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_process
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_post
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_task
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_block_allocate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[80]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_in
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_process
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_post
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_task
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_block_allocate
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[eb]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[ec]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>raw_start_first_task</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_start
</UL>

<P><STRONG><a name="[99]"></a>port_task_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_process
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
</UL>

<P><STRONG><a name="[b4]"></a>raw_int_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; raw_stack_check &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_stack_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[ed]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[ee]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[56]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_RxInt
</UL>

<P><STRONG><a name="[ef]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[58]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[54]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[f0]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[5b]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Gpio_Output_AFPP
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Gpio_Input_INFLOATING
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_len_init
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Nvic_Config
</UL>

<P><STRONG><a name="[5a]"></a>Pub_Gpio_Input_INFLOATING</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pub.o(i.Pub_Gpio_Input_INFLOATING))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pub_Gpio_Input_INFLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart2_init
</UL>

<P><STRONG><a name="[5c]"></a>Pub_Gpio_Output_AFPP</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pub.o(i.Pub_Gpio_Output_AFPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pub_Gpio_Output_AFPP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart2_init
</UL>

<P><STRONG><a name="[5d]"></a>Pub_Nvic_Config</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, pub.o(i.Pub_Nvic_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pub_Nvic_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart2_init
</UL>

<P><STRONG><a name="[5f]"></a>Pub_Uart_Hardware_Cfg</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, pub.o(i.Pub_Uart_Hardware_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Pub_Uart_Hardware_Cfg &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart2_init
</UL>

<P><STRONG><a name="[62]"></a>Pub_Uart_Int_Cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pub.o(i.Pub_Uart_Int_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Pub_Uart_Int_Cfg &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart2_init
</UL>

<P><STRONG><a name="[a3]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[91]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart2_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[92]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart2_init
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[70]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[72]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; task_0_tick_post &rArr; raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_post
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; Uart1_RxInt &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_RxInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, debug_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; serial_fifo_int_recv &rArr; serial_append &rArr; raw_queue_size_end_post &rArr; msg_size_post &rArr; wake_send_msg_size &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_int_recv
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Int_Cfg
</UL>

<P><STRONG><a name="[6c]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[60]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Hardware_Cfg
</UL>

<P><STRONG><a name="[64]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Int_Cfg
</UL>

<P><STRONG><a name="[6f]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
</UL>

<P><STRONG><a name="[6b]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[63]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Int_Cfg
</UL>

<P><STRONG><a name="[61]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Hardware_Cfg
</UL>

<P><STRONG><a name="[6d]"></a>Uart1_RxInt</STRONG> (Thumb, 46 bytes, Stack size 144 bytes, sys_uart.o(i.Uart1_RxInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = Uart1_RxInt &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_in
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[f1]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[f2]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[f3]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[76]"></a>add_ready_list</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, raw_pend.o(i.add_ready_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[77]"></a>add_ready_list_end</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, raw_pend.o(i.add_ready_list_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[78]"></a>add_ready_list_head</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, raw_pend.o(i.add_ready_list_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[d3]"></a>bit_search_first_one</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, raw_system.o(i.bit_search_first_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bit_search_first_one
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
</UL>

<P><STRONG><a name="[7c]"></a>block_state_post_process</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, raw_system.o(i.block_state_post_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = block_state_post_process &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
</UL>

<P><STRONG><a name="[7e]"></a>calculate_time_slice</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, raw_sched.o(i.calculate_time_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = calculate_time_slice &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_handler
</UL>

<P><STRONG><a name="[83]"></a>call_timer_task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, raw_timer.o(i.call_timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = call_timer_task &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_handler
</UL>

<P><STRONG><a name="[84]"></a>change_internal_task_priority</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, raw_task.o(i.change_internal_task_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = change_internal_task_priority &rArr; mtx_chg_pri &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pend_list_priority
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx_chg_pri
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx_chg_pri
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
</UL>

<P><STRONG><a name="[86]"></a>change_pend_list_priority</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, raw_pend.o(i.change_pend_list_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = change_pend_list_priority &rArr; add_to_priority_list
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_priority_list
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[89]"></a>create_init_task</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sys_init.o(i.create_init_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = create_init_task &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8e]"></a>debug_serial_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, debug_uart.o(i.debug_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = debug_serial_init &rArr; debug_fifo_init &rArr; serial_fifo_init &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[93]"></a>event_set</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, raw_event.o(i.event_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = event_set &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
</UL>

<P><STRONG><a name="[74]"></a>fifo_in</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fifo.o(i.fifo_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = fifo_in &rArr; fifo_copy_in &rArr; raw_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_unused
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_copy_in
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_RxInt
</UL>

<P><STRONG><a name="[b3]"></a>get_ready_task</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, raw_pend.o(i.get_ready_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ready_task
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_start
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_process
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
</UL>

<P><STRONG><a name="[d9]"></a>get_shell_task_obj</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug_uart.o(i.get_shell_task_obj))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[81]"></a>hybrid_int_process</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, raw_task_0.o(i.hybrid_int_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_task_switch
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[a1]"></a>int_msg_post</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, raw_task_0.o(i.int_msg_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = int_msg_post &rArr; raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_post
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_suspend
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_resume
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_end_post
</UL>

<P><STRONG><a name="[46]"></a>main</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; raw_os_init &rArr; tick_task_start &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_start
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_init_task
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[82]"></a>move_to_ready_list_end</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, raw_pend.o(i.move_to_ready_list_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_to_ready_list_end
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
</UL>

<P><STRONG><a name="[9d]"></a>msg_post</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, raw_queue.o(i.msg_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = msg_post &rArr; wake_send_msg &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_send_msg
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
</UL>

<P><STRONG><a name="[9e]"></a>msg_size_post</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, raw_queue_size.o(i.msg_size_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = msg_size_post &rArr; wake_send_msg_size &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_send_msg_size
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_end_post
</UL>

<P><STRONG><a name="[87]"></a>mtx_chg_pri</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, raw_mutex.o(i.mtx_chg_pri))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = mtx_chg_pri &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[ab]"></a>mutex_state_change</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, raw_mutex.o(i.mutex_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mutex_state_change &rArr; release_mutex &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[cb]"></a>port_stack_init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, port.o(i.port_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = port_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>

<P><STRONG><a name="[b2]"></a>raw_block_allocate</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, raw_block.o(i.raw_block_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = raw_block_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_alloc
</UL>

<P><STRONG><a name="[d7]"></a>raw_block_pool_create</STRONG> (Thumb, 126 bytes, Stack size 28 bytes, raw_block.o(i.raw_block_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = raw_block_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_init
</UL>

<P><STRONG><a name="[68]"></a>raw_enter_interrupt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, raw_system.o(i.raw_enter_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = raw_enter_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6a]"></a>raw_finish_int</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, raw_system.o(i.raw_finish_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = raw_finish_int &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_int_switch
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_task
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b5]"></a>raw_idle_coroutine_hook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port_hook.o(i.raw_idle_coroutine_hook))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_task
</UL>

<P><STRONG><a name="[4c]"></a>raw_idle_task</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, raw_idle.o(i.raw_idle_task))
<BR><BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_coroutine_hook
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_sched.o(i.raw_os_init)
</UL>
<P><STRONG><a name="[97]"></a>raw_memcpy</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, user_extension.o(i.raw_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = raw_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_copy_in
</UL>

<P><STRONG><a name="[a0]"></a>raw_memset</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, user_extension.o(i.raw_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = raw_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_init
</UL>

<P><STRONG><a name="[8c]"></a>raw_mutex_create</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, raw_mutex.o(i.raw_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fifo_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[b6]"></a>raw_mutex_get</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, raw_mutex.o(i.raw_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = raw_mutex_get &rArr; change_internal_task_priority &rArr; mtx_chg_pri &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_lock
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[b8]"></a>raw_mutex_put</STRONG> (Thumb, 370 bytes, Stack size 24 bytes, raw_mutex.o(i.raw_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = raw_mutex_put &rArr; change_internal_task_priority &rArr; mtx_chg_pri &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_unlock
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[a4]"></a>raw_os_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, raw_sched.o(i.raw_os_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = raw_os_init &rArr; tick_task_start &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_create
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_start
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_init
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init_hook
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>raw_os_init_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(i.raw_os_init_hook))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[a5]"></a>raw_os_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, raw_sched.o(i.raw_os_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = raw_os_start &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_start_first_task
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_task
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>raw_pend_object</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, raw_pend.o(i.raw_pend_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = raw_pend_object &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_priority_list
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
</UL>

<P><STRONG><a name="[7d]"></a>raw_printf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, simple_printf.o(i.raw_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_unlock
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_lock
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fifo_init
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_stack_check
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[d6]"></a>raw_queue_size_create</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, raw_queue_size.o(i.raw_queue_size_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = raw_queue_size_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_init
</UL>

<P><STRONG><a name="[c4]"></a>raw_queue_size_end_post</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, raw_queue_size.o(i.raw_queue_size_end_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = raw_queue_size_end_post &rArr; msg_size_post &rArr; wake_send_msg_size &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_append
</UL>

<P><STRONG><a name="[95]"></a>raw_sched</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, raw_sched.o(i.raw_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_task_switch
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_task
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
</UL>

<P><STRONG><a name="[ce]"></a>raw_semaphore_create</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, raw_sem.o(i.raw_semaphore_create))
<BR><BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_create
</UL>

<P><STRONG><a name="[c5]"></a>raw_semaphore_get</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, raw_sem.o(i.raw_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = raw_semaphore_get &rArr; raw_pend_object &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_get
</UL>

<P><STRONG><a name="[75]"></a>raw_semaphore_put</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, raw_sem.o(i.raw_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart1_RxInt
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_put
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_timer_task
</UL>

<P><STRONG><a name="[c6]"></a>raw_semaphore_set</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, raw_sem.o(i.raw_semaphore_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = raw_semaphore_set &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[c8]"></a>raw_sleep</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, raw_task.o(i.raw_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = raw_sleep &rArr; remove_ready_list &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
</UL>

<P><STRONG><a name="[55]"></a>raw_stack_check</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, raw_stat.o(i.raw_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = raw_stack_check &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[d8]"></a>raw_sys_tick_init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, port.o(i.raw_sys_tick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = raw_sys_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[be]"></a>raw_task_0_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, raw_task_0.o(i.raw_task_0_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = raw_task_0_init &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[a2]"></a>raw_task_0_post</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, raw_task_0.o(i.raw_task_0_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_post
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_post
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>

<P><STRONG><a name="[8a]"></a>raw_task_create</STRONG> (Thumb, 526 bytes, Stack size 56 bytes, raw_task.o(i.raw_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_hook
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_memset
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_stack_init
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_init_task
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_start
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_init
</UL>

<P><STRONG><a name="[da]"></a>raw_task_identify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw_task.o(i.raw_task_identify))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[cc]"></a>raw_task_resume</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, raw_task.o(i.raw_task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = raw_task_resume &rArr; int_msg_post &rArr; raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[cd]"></a>raw_task_semaphore_create</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, raw_task_sem.o(i.raw_task_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = raw_task_semaphore_create
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_start
</UL>

<P><STRONG><a name="[cf]"></a>raw_task_semaphore_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, raw_task_sem.o(i.raw_task_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = raw_task_semaphore_get &rArr; raw_semaphore_get &rArr; raw_pend_object &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_process
</UL>

<P><STRONG><a name="[d0]"></a>raw_task_semaphore_put</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, raw_task_sem.o(i.raw_task_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = raw_task_semaphore_put &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_handler
</UL>

<P><STRONG><a name="[d1]"></a>raw_task_suspend</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, raw_task.o(i.raw_task_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = raw_task_suspend &rArr; int_msg_post &rArr; raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>
<BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[de]"></a>raw_tick_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(i.raw_tick_hook))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_handler
</UL>

<P><STRONG><a name="[bd]"></a>raw_timer_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, raw_timer.o(i.raw_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = raw_timer_init &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_create
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[94]"></a>raw_wake_object</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, raw_pend.o(i.raw_wake_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
</UL>

<P><STRONG><a name="[85]"></a>remove_ready_list</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, raw_pend.o(i.remove_ready_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = remove_ready_list &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_search_first_one
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_process
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
</UL>

<P><STRONG><a name="[ba]"></a>run_queue_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, raw_pend.o(i.run_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[9c]"></a>semaphore_put</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, raw_sem.o(i.semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
</UL>

<P><STRONG><a name="[d4]"></a>serial_alloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, serial_fifo.o(i.serial_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = serial_alloc &rArr; raw_block_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_block_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_int_recv
</UL>

<P><STRONG><a name="[d5]"></a>serial_append</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, serial_fifo.o(i.serial_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 156 + Unknown Stack Size
<LI>Call Chain = serial_append &rArr; raw_queue_size_end_post &rArr; msg_size_post &rArr; wake_send_msg_size &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_end_post
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_int_recv
</UL>

<P><STRONG><a name="[8d]"></a>serial_fifo_init</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, serial_fifo.o(i.serial_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = serial_fifo_init &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_create
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_create
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_block_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fifo_init
</UL>

<P><STRONG><a name="[6e]"></a>serial_fifo_int_recv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, serial_fifo.o(i.serial_fifo_int_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 180 + Unknown Stack Size
<LI>Call Chain = serial_fifo_int_recv &rArr; serial_append &rArr; raw_queue_size_end_post &rArr; msg_size_post &rArr; wake_send_msg_size &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_append
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[c2]"></a>simple_printf_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, simple_printf.o(i.simple_printf_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = simple_printf_lock &rArr; raw_mutex_get &rArr; change_internal_task_priority &rArr; mtx_chg_pri &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>

<P><STRONG><a name="[c3]"></a>simple_printf_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, simple_printf.o(i.simple_printf_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = simple_printf_unlock &rArr; raw_mutex_put &rArr; change_internal_task_priority &rArr; mtx_chg_pri &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>

<P><STRONG><a name="[52]"></a>sys_led_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sys_led.o(i.sys_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = sys_led_init &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.constdata)
</UL>
<P><STRONG><a name="[69]"></a>task_0_tick_post</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, raw_task_0.o(i.task_0_tick_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = task_0_tick_post &rArr; raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_post
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ca]"></a>task_create_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(i.task_create_hook))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>

<P><STRONG><a name="[9b]"></a>task_resume</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, raw_task.o(i.task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = task_resume &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_resume
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
</UL>

<P><STRONG><a name="[9a]"></a>task_suspend</STRONG> (Thumb, 330 bytes, Stack size 16 bytes, raw_task.o(i.task_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = task_suspend &rArr; remove_ready_list &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_suspend
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
</UL>

<P><STRONG><a name="[bb]"></a>tick_list_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw_tick.o(i.tick_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[c1]"></a>tick_list_insert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, raw_tick.o(i.tick_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tick_list_insert &rArr; tick_list_priority_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_priority_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
</UL>

<P><STRONG><a name="[ad]"></a>tick_list_remove</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, raw_tick.o(i.tick_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tick_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[e1]"></a>tick_list_update</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, raw_tick.o(i.tick_list_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tick_list_update &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_state_change
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_process
</UL>

<P><STRONG><a name="[bf]"></a>tick_task_start</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, raw_tick.o(i.tick_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tick_task_start &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[4f]"></a>timer_task</STRONG> (Thumb, 214 bytes, Stack size 8 bytes, raw_timer.o(i.timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = timer_task &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_priority_insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_timer.o(i.raw_timer_init)
</UL>
<P><STRONG><a name="[a7]"></a>wake_send_msg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, raw_pend.o(i.wake_send_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wake_send_msg &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
</UL>

<P><STRONG><a name="[a9]"></a>wake_send_msg_size</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, raw_pend.o(i.wake_send_msg_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wake_send_msg_size &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[4a]"></a>sys_init_task</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, sys_init.o(i.sys_init_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = sys_init_task &rArr; debug_serial_init &rArr; debug_fifo_init &rArr; serial_fifo_init &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_suspend
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_resume
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_identify
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sys_tick_init
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_shell_task_obj
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_serial_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(i.create_init_task)
</UL>
<P><STRONG><a name="[dd]"></a>sys_led_off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_led.o(i.sys_led_off))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
</UL>

<P><STRONG><a name="[dc]"></a>sys_led_on</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_led.o(i.sys_led_on))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
</UL>

<P><STRONG><a name="[50]"></a>sys_led_task</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys_led.o(i.sys_led_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = sys_led_task &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_len_init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_on
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_off
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_led.o(i.sys_led_init)
</UL>
<P><STRONG><a name="[db]"></a>sys_len_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sys_led.o(i.sys_len_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_len_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
</UL>

<P><STRONG><a name="[8b]"></a>debug_fifo_init</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, debug_uart.o(i.debug_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = debug_fifo_init &rArr; serial_fifo_init &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_init
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_create
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_serial_init
</UL>

<P><STRONG><a name="[49]"></a>debug_fifo_read</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, debug_uart.o(i.debug_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_fifo_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_uart.o(i.USART2_IRQHandler)
</UL>
<P><STRONG><a name="[8f]"></a>debug_uart_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, debug_uart.o(i.debug_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = debug_uart_init &rArr; debug_usart2_init &rArr; Pub_Uart_Hardware_Cfg &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart2_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_serial_init
</UL>

<P><STRONG><a name="[90]"></a>debug_usart2_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, debug_uart.o(i.debug_usart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = debug_usart2_init &rArr; Pub_Uart_Hardware_Cfg &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Int_Cfg
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Hardware_Cfg
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Nvic_Config
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Gpio_Output_AFPP
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Gpio_Input_INFLOATING
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
</UL>

<P><STRONG><a name="[66]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[67]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[b9]"></a>is_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw_mutex.o(i.is_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
</UL>

<P><STRONG><a name="[aa]"></a>release_mutex</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, raw_mutex.o(i.release_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = release_mutex &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_state_change
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx_chg_pri
</UL>

<P><STRONG><a name="[7b]"></a>add_to_priority_list</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, raw_pend.o(i.add_to_priority_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = add_to_priority_list
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pend_list_priority
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
</UL>

<P><STRONG><a name="[7a]"></a>bit_set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, raw_pend.o(i.bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
</UL>

<P><STRONG><a name="[88]"></a>list_delete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, raw_pend.o(i.list_delete))
<BR><BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pend_list_priority
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>

<P><STRONG><a name="[79]"></a>list_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, raw_pend.o(i.list_insert))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_priority_list
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
</UL>

<P><STRONG><a name="[ac]"></a>pend_task_wake_up</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, raw_pend.o(i.pend_task_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_send_msg_size
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_send_msg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
</UL>

<P><STRONG><a name="[a6]"></a>is_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw_queue.o(i.is_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
</UL>

<P><STRONG><a name="[a8]"></a>is_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw_queue_size.o(i.is_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
</UL>

<P><STRONG><a name="[c7]"></a>is_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw_sem.o(i.is_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
</UL>

<P><STRONG><a name="[4b]"></a>int_msg_handler</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, raw_task_0.o(i.int_msg_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = int_msg_handler &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_task_0.o(i.int_msg_init)
</UL>
<P><STRONG><a name="[9f]"></a>int_msg_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, raw_task_0.o(i.int_msg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = int_msg_init &rArr; raw_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_init
</UL>

<P><STRONG><a name="[c9]"></a>task_0_post</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, raw_task_0.o(i.task_0_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_post
</UL>

<P><STRONG><a name="[4d]"></a>task_0_process</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, raw_task_0.o(i.task_0_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = task_0_process &rArr; remove_ready_list &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_task_switch
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_task
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_task_0.o(i.raw_task_0_init)
</UL>
<P><STRONG><a name="[4e]"></a>task_0_tick_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, raw_task_0.o(i.task_0_tick_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = task_0_tick_handler &rArr; raw_task_semaphore_put &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_tick_hook
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_put
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_timer_task
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_task_0.o(i.raw_task_0_init)
</UL>
<P><STRONG><a name="[e0]"></a>list_delete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, raw_tick.o(i.list_delete))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[df]"></a>tick_list_priority_insert</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, raw_tick.o(i.tick_list_priority_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tick_list_priority_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
</UL>

<P><STRONG><a name="[51]"></a>tick_task_process</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, raw_tick.o(i.tick_task_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tick_task_process &rArr; tick_list_update &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_tick.o(i.tick_task_start)
</UL>
<P><STRONG><a name="[e2]"></a>list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw_timer.o(i.list_init))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_init
</UL>

<P><STRONG><a name="[d2]"></a>timer_list_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, raw_timer.o(i.timer_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
</UL>

<P><STRONG><a name="[e4]"></a>timer_list_priority_insert</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, raw_timer.o(i.timer_list_priority_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_list_priority_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[e3]"></a>timer_list_remove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, raw_timer.o(i.timer_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[ae]"></a>print</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, simple_printf.o(i.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>

<P><STRONG><a name="[b1]"></a>printchar</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, simple_printf.o(i.printchar))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[b0]"></a>printi</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, simple_printf.o(i.printi))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[af]"></a>prints</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, simple_printf.o(i.prints))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prints
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[96]"></a>fifo_copy_in</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, fifo.o(i.fifo_copy_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fifo_copy_in &rArr; raw_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_in
</UL>

<P><STRONG><a name="[98]"></a>fifo_unused</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(i.fifo_unused))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_in
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
