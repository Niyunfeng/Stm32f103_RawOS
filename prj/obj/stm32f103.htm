<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\stm32f103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\stm32f103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5.03 [Build 24]: Last Updated: Wed Jun 17 21:07:50 2015
<BR><P>
<H3>Maximum Stack Usage =        248 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
timer_task &rArr; raw_semaphore_get &rArr; raw_pend_object &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f9]">__user_initial_stackheap</a>
 <LI><a href="#[69]">OS_CPU_SR_Save</a>
 <LI><a href="#[6a]">OS_CPU_SR_Restore</a>
 <LI><a href="#[14d]">CPU_IntDis</a>
 <LI><a href="#[14e]">CPU_IntEn</a>
 <LI><a href="#[b0]">raw_start_first_task</a>
 <LI><a href="#[a8]">port_task_switch</a>
 <LI><a href="#[bd]">raw_int_switch</a>
 <LI><a href="#[b]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">UsageFault_Handler</a><BR>
 <LI><a href="#[9]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">SVC_Handler</a><BR>
 <LI><a href="#[a]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">DebugMon_Handler</a><BR>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1f]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[86]">remove_ready_list</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89]">raw_printf</a><BR>
 <LI><a href="#[7a]">mtx_chg_pri</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">change_internal_task_priority</a><BR>
 <LI><a href="#[78]">release_mutex</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[79]">change_internal_task_priority</a><BR>
 <LI><a href="#[8b]">pend_task_wake_up</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89]">raw_printf</a><BR>
 <LI><a href="#[7c]">raw_mutex_get</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6c]">raw_pend_object</a><BR>
 <LI><a href="#[6e]">block_state_post_process</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[89]">raw_printf</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1f]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">BusFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1c]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">DebugMon_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[35]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">HardFault_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">MemManage_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[4]">NMI_Handler</a> from stm32f10x_it.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">PVD_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PendSV_Handler</a> from cpu.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">RTC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SVC_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[c]">SysTick_Handler</a> from port.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3a]">SystemInit</a> from system_stm32f10x.o(.text) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[f]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">TIM3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">USART1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USART3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">UsageFault_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[42]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3d]">int_msg_handler</a> from raw_task_0.o(.text) referenced from raw_task_0.o(.text)
 <LI><a href="#[3c]">raw_idle_task</a> from raw_idle.o(.text) referenced from raw_sched.o(.text)
 <LI><a href="#[38]">sys_init_task</a> from sys_init.o(.text) referenced from sys_init.o(.text)
 <LI><a href="#[41]">sys_led_init</a> from sys_led.o(.text) referenced from sys_init.o(.constdata)
 <LI><a href="#[39]">sys_led_task</a> from sys_led.o(.text) referenced from sys_led.o(.text)
 <LI><a href="#[3e]">task_0_process</a> from raw_task_0.o(.text) referenced from raw_task_0.o(.text)
 <LI><a href="#[3f]">task_0_tick_handler</a> from raw_task_0.o(.text) referenced from raw_task_0.o(.text)
 <LI><a href="#[40]">tick_task_process</a> from raw_tick.o(.text) referenced from raw_tick.o(.text)
 <LI><a href="#[ee]">timer_task</a> from raw_timer.o(.text) referenced from raw_timer.o(.text)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[42]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[43]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[45]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[fb]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[fc]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[46]"></a>__scatterload_copy</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, __scatter_copy.o(!!handler_copy), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_copy
</UL>

<P><STRONG><a name="[fd]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[4a]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[fe]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[ff]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002A))

<P><STRONG><a name="[100]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[101]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[102]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[103]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[104]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[105]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[106]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[107]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000008))

<P><STRONG><a name="[108]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))

<P><STRONG><a name="[109]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[10a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[10b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[10c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[10d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[10e]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))

<P><STRONG><a name="[10f]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[110]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[111]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[4f]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[112]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000006))

<P><STRONG><a name="[113]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000E))

<P><STRONG><a name="[114]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[115]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000009))

<P><STRONG><a name="[116]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))

<P><STRONG><a name="[117]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000B))

<P><STRONG><a name="[44]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[118]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[47]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[49]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[119]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[4b]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; raw_os_init &rArr; tick_task_start &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[11a]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[fa]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[4e]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[11b]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[50]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[4c]"></a>main</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = main &rArr; raw_os_init &rArr; tick_task_start &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_start
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_init_task
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[56]"></a>create_init_task</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = create_init_task &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>sys_led_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sys_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = sys_led_init &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.constdata)
</UL>
<P><STRONG><a name="[3]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f9]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[4]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[11c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, system_stm32f10x.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>GPIO_DeInit</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[65]"></a>GPIO_AFIODeInit</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, stm32f10x_gpio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>

<P><STRONG><a name="[5d]"></a>GPIO_Init</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, stm32f10x_gpio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_len_init
</UL>

<P><STRONG><a name="[11d]"></a>GPIO_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[11e]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>GPIO_ReadInputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[120]"></a>GPIO_ReadOutputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[121]"></a>GPIO_ReadOutputData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[122]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[123]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[124]"></a>GPIO_WriteBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[125]"></a>GPIO_Write</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[126]"></a>GPIO_PinLockConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[127]"></a>GPIO_EventOutputConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[128]"></a>GPIO_EventOutputCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[129]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[12b]"></a>GPIO_ETH_MediaInterfaceConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_gpio.o(.text), UNUSED)

<P><STRONG><a name="[12c]"></a>RCC_DeInit</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12d]"></a>RCC_HSEConfig</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[67]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_WaitForHSEStartUp
</UL>

<P><STRONG><a name="[66]"></a>RCC_WaitForHSEStartUp</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
</UL>

<P><STRONG><a name="[12e]"></a>RCC_AdjustHSICalibrationValue</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[12f]"></a>RCC_HSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[130]"></a>RCC_PLLConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[131]"></a>RCC_PLLCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[132]"></a>RCC_SYSCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[133]"></a>RCC_GetSYSCLKSource</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[134]"></a>RCC_HCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>RCC_PCLK1Config</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[136]"></a>RCC_PCLK2Config</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[137]"></a>RCC_ITConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[138]"></a>RCC_USBCLKConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[139]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13a]"></a>RCC_LSEConfig</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13b]"></a>RCC_LSICmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13c]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13d]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[13e]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[54]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[52]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[53]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_AFIODeInit
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_DeInit
</UL>

<P><STRONG><a name="[13f]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[140]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[141]"></a>RCC_ClockSecuritySystemCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[142]"></a>RCC_MCOConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>RCC_ClearFlag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>RCC_GetITStatus</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[145]"></a>RCC_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>raw_event_create</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, raw_event.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>raw_event_get</STRONG> (Thumb, 432 bytes, Stack size 40 bytes, raw_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[6f]"></a>event_set</STRONG> (Thumb, 312 bytes, Stack size 48 bytes, raw_event.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = event_set &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_set
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
</UL>

<P><STRONG><a name="[71]"></a>raw_event_set</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, raw_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
</UL>

<P><STRONG><a name="[73]"></a>raw_event_delete</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, raw_event.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pend_obj
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[3c]"></a>raw_idle_task</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, raw_idle.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_coroutine_hook
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_sched.o(.text)
</UL>
<P><STRONG><a name="[ad]"></a>raw_mutex_create</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, raw_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf_init
</UL>

<P><STRONG><a name="[76]"></a>chg_pri_mutex</STRONG> (Thumb, 130 bytes, Stack size 40 bytes, raw_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_priority_change
</UL>

<P><STRONG><a name="[7a]"></a>mtx_chg_pri</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, raw_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = mtx_chg_pri &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[7b]"></a>mutex_state_change</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, raw_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mutex_state_change &rArr; release_mutex &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_wait_abort
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_delete
</UL>

<P><STRONG><a name="[7c]"></a>raw_mutex_get</STRONG> (Thumb, 532 bytes, Stack size 24 bytes, raw_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = raw_mutex_get &rArr;  raw_pend_object (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_lock
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_delete
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_deactivate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_change
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_activate
</UL>

<P><STRONG><a name="[7d]"></a>raw_mutex_put</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, raw_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = raw_mutex_put &rArr; change_internal_task_priority &rArr; mtx_chg_pri &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_unlock
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_delete
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_deactivate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_change
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_activate
</UL>

<P><STRONG><a name="[7e]"></a>raw_task_free_mutex</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, raw_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_delete
</UL>

<P><STRONG><a name="[7f]"></a>raw_mutex_delete</STRONG> (Thumb, 174 bytes, Stack size 16 bytes, raw_mutex.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pend_obj
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a9]"></a>run_queue_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, raw_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[82]"></a>add_ready_list_head</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[84]"></a>add_ready_list_end</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_set
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[85]"></a>add_ready_list</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = add_ready_list &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pend_obj
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_wait_abort
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
</UL>

<P><STRONG><a name="[86]"></a>remove_ready_list</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + In Cycle
<LI>Call Chain = remove_ready_list &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_search_first_one
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_process
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_delete
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
</UL>

<P><STRONG><a name="[8a]"></a>move_to_ready_list_end</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_to_ready_list_end
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
</UL>

<P><STRONG><a name="[a7]"></a>get_ready_task</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ready_task
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_start
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_process
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
</UL>

<P><STRONG><a name="[70]"></a>raw_wake_object</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_free_mutex
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_iter_block_task
</UL>

<P><STRONG><a name="[8d]"></a>wake_send_msg</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wake_send_msg &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
</UL>

<P><STRONG><a name="[8e]"></a>wake_send_msg_size</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = wake_send_msg_size &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
</UL>

<P><STRONG><a name="[6c]"></a>raw_pend_object</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = raw_pend_object &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_priority_list
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_receive
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_get
</UL>

<P><STRONG><a name="[74]"></a>delete_pend_obj</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, raw_pend.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_delete
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_delete
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_delete
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_delete
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_delete
</UL>

<P><STRONG><a name="[90]"></a>change_pend_list_priority</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = change_pend_list_priority &rArr; add_to_priority_list
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_priority_list
</UL>
<BR>[Called By]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[147]"></a>raw_queue_create</STRONG> (Thumb, 66 bytes, Stack size 12 bytes, raw_queue.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>msg_post</STRONG> (Thumb, 366 bytes, Stack size 32 bytes, raw_queue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = msg_post &rArr; wake_send_msg &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_send_msg
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_all_post
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_post_notify
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_end_post
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_front_post
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
</UL>

<P><STRONG><a name="[93]"></a>raw_queue_front_post</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, raw_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>

<P><STRONG><a name="[94]"></a>raw_queue_end_post</STRONG> (Thumb, 64 bytes, Stack size 24 bytes, raw_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>

<P><STRONG><a name="[95]"></a>raw_queue_post_notify</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, raw_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>

<P><STRONG><a name="[96]"></a>raw_queue_all_post</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, raw_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>

<P><STRONG><a name="[97]"></a>raw_queue_send_notify</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, raw_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[98]"></a>raw_queue_receive</STRONG> (Thumb, 396 bytes, Stack size 32 bytes, raw_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[99]"></a>raw_queue_full_check</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, raw_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[9a]"></a>raw_queue_flush</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, raw_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[9b]"></a>raw_queue_delete</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, raw_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pend_obj
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[9c]"></a>raw_queue_get_information</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, raw_queue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[148]"></a>raw_queue_size_create</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, raw_queue_size.o(.text), UNUSED)

<P><STRONG><a name="[9d]"></a>msg_size_post</STRONG> (Thumb, 366 bytes, Stack size 40 bytes, raw_queue_size.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = msg_size_post &rArr; wake_send_msg_size &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_send_msg_size
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_all_post
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_end_post
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_front_post
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
</UL>

<P><STRONG><a name="[9f]"></a>raw_queue_size_receive</STRONG> (Thumb, 444 bytes, Stack size 32 bytes, raw_queue_size.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a0]"></a>raw_queue_size_front_post</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, raw_queue_size.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>

<P><STRONG><a name="[a1]"></a>raw_queue_size_end_post</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, raw_queue_size.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>

<P><STRONG><a name="[a2]"></a>raw_queue_size_all_post</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, raw_queue_size.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>

<P><STRONG><a name="[a3]"></a>raw_queue_size_full_check</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, raw_queue_size.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a4]"></a>raw_queue_size_flush</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, raw_queue_size.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a5]"></a>raw_queue_size_delete</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, raw_queue_size.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pend_obj
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[a6]"></a>raw_queue_size_get_information</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, raw_queue_size.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[6d]"></a>raw_sched</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, raw_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_task_switch
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_task
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_delete
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_delete
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_delete
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_receive
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_delete
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enable_sche
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_delete
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_get
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_iter_block_task
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_wait_abort
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_priority_change
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
</UL>

<P><STRONG><a name="[55]"></a>raw_os_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, raw_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = raw_os_init &rArr; tick_task_start &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_start
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_init
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init_hook
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_queue_init
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[57]"></a>raw_os_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, raw_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = raw_os_start &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_start_first_task
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_task
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>calculate_time_slice</STRONG> (Thumb, 316 bytes, Stack size 24 bytes, raw_sched.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = calculate_time_slice &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_time_tick
</UL>

<P><STRONG><a name="[de]"></a>raw_semaphore_create</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, raw_sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_create
</UL>

<P><STRONG><a name="[b2]"></a>semaphore_put</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, raw_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put_all
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put_notify
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
</UL>

<P><STRONG><a name="[b4]"></a>raw_semaphore_put</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, raw_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_put
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_timer_task
</UL>

<P><STRONG><a name="[b5]"></a>raw_semaphore_put_notify</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, raw_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>

<P><STRONG><a name="[b6]"></a>raw_semaphore_put_all</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, raw_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
</UL>

<P><STRONG><a name="[b7]"></a>raw_semphore_send_notify</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, raw_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[b8]"></a>raw_semaphore_get</STRONG> (Thumb, 332 bytes, Stack size 24 bytes, raw_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = raw_semaphore_get &rArr; raw_pend_object &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_get
</UL>

<P><STRONG><a name="[b9]"></a>raw_semaphore_set</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, raw_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = raw_semaphore_set &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_set
</UL>

<P><STRONG><a name="[ba]"></a>raw_semaphore_delete</STRONG> (Thumb, 172 bytes, Stack size 16 bytes, raw_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pend_obj
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_delete
</UL>

<P><STRONG><a name="[bb]"></a>raw_stack_check</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, raw_stat.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = raw_stack_check &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[bc]"></a>raw_finish_int</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, raw_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = raw_finish_int &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_task
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_int_switch
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[be]"></a>raw_time_tick</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, raw_system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_tick_hook
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_put
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_timer_task
</UL>

<P><STRONG><a name="[c2]"></a>raw_enter_interrupt</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, raw_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = raw_enter_interrupt
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[149]"></a>raw_system_time_get</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw_system.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>block_state_post_process</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, raw_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = block_state_post_process &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_receive
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_get
</UL>

<P><STRONG><a name="[c3]"></a>raw_system_time_set</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, raw_system.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[88]"></a>bit_search_first_one</STRONG> (Thumb, 150 bytes, Stack size 20 bytes, raw_system.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bit_search_first_one
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
</UL>

<P><STRONG><a name="[5b]"></a>raw_task_create</STRONG> (Thumb, 526 bytes, Stack size 56 bytes, raw_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_hook
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_memset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_init_task
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_start
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_init
</UL>

<P><STRONG><a name="[14a]"></a>raw_task_stack_check</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, raw_task.o(.text), UNUSED)

<P><STRONG><a name="[c7]"></a>raw_disable_sche</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[c8]"></a>raw_enable_sche</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[5f]"></a>raw_sleep</STRONG> (Thumb, 208 bytes, Stack size 16 bytes, raw_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = raw_sleep &rArr; remove_ready_list &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_time_sleep
</UL>

<P><STRONG><a name="[c9]"></a>raw_time_sleep</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
</UL>

<P><STRONG><a name="[ca]"></a>task_suspend</STRONG> (Thumb, 362 bytes, Stack size 16 bytes, raw_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = task_suspend &rArr; remove_ready_list &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_suspend
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
</UL>

<P><STRONG><a name="[5a]"></a>raw_task_suspend</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, raw_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = raw_task_suspend &rArr; int_msg_post &rArr; raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[cb]"></a>task_resume</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, raw_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = task_resume &rArr; add_ready_list &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_resume
</UL>

<P><STRONG><a name="[cc]"></a>raw_task_resume</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
</UL>

<P><STRONG><a name="[79]"></a>change_internal_task_priority</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, raw_task.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = change_internal_task_priority &rArr; mtx_chg_pri &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pend_list_priority
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx_chg_pri
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_free_mutex
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx_chg_pri
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_priority_change
</UL>

<P><STRONG><a name="[cd]"></a>raw_task_priority_change</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_pri_mutex
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[ce]"></a>raw_task_delete</STRONG> (Thumb, 324 bytes, Stack size 16 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_free_mutex
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_state_change
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_delete_hook
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>

<P><STRONG><a name="[d1]"></a>raw_set_task_user_point</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[14b]"></a>raw_get_task_user_point</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, raw_task.o(.text), UNUSED)

<P><STRONG><a name="[d2]"></a>raw_task_time_slice_change</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d3]"></a>raw_set_sched_way</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d4]"></a>raw_get_sched_way</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[d5]"></a>raw_task_wait_abort</STRONG> (Thumb, 266 bytes, Stack size 16 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_state_change
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_abort_hook
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>

<P><STRONG><a name="[59]"></a>raw_task_identify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw_task.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[d7]"></a>raw_iter_block_task</STRONG> (Thumb, 146 bytes, Stack size 32 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>

<P><STRONG><a name="[14c]"></a>raw_get_system_global_space</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, raw_task.o(.text), UNUSED)

<P><STRONG><a name="[d9]"></a>raw_task_0_post</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, raw_task_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_post
</UL>
<BR>[Called By]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_post
</UL>

<P><STRONG><a name="[da]"></a>task_0_tick_post</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, raw_task_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = task_0_tick_post &rArr; raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_post
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[db]"></a>raw_task_0_front_post</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, raw_task_0.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_post
</UL>

<P><STRONG><a name="[6b]"></a>hybrid_int_process</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, raw_task_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_task_switch
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_delete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semphore_send_notify
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_get_information
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_delete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_flush
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_full_check
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_get_information
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_delete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_flush
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_full_check
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_receive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_send_notify
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_delete
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enable_sche
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_delete
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_iter_block_task
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_wait_abort
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_get_sched_way
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_set_sched_way
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_time_slice_change
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_priority_change
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_system_time_set
</UL>

<P><STRONG><a name="[72]"></a>int_msg_post</STRONG> (Thumb, 296 bytes, Stack size 40 bytes, raw_task_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = int_msg_post &rArr; raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_post
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_suspend
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put_all
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put_notify
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_all_post
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_end_post
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_front_post
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_all_post
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_post_notify
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_end_post
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_front_post
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_set
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_resume
</UL>

<P><STRONG><a name="[ae]"></a>raw_task_0_init</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, raw_task_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = raw_task_0_init &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[dd]"></a>raw_task_semaphore_create</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, raw_task_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = raw_task_semaphore_create
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_start
</UL>

<P><STRONG><a name="[c0]"></a>raw_task_semaphore_put</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, raw_task_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = raw_task_semaphore_put &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_time_tick
</UL>

<P><STRONG><a name="[df]"></a>raw_task_semaphore_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, raw_task_sem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = raw_task_semaphore_get &rArr; raw_semaphore_get &rArr; raw_pend_object &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_process
</UL>

<P><STRONG><a name="[e0]"></a>raw_task_semaphore_set</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, raw_task_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
</UL>

<P><STRONG><a name="[e1]"></a>raw_task_semaphore_delete</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, raw_task_sem.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_delete
</UL>

<P><STRONG><a name="[aa]"></a>tick_list_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[8f]"></a>tick_list_insert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, raw_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tick_list_insert &rArr; tick_list_priority_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_priority_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
</UL>

<P><STRONG><a name="[8c]"></a>tick_list_remove</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, raw_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tick_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pend_obj
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_wait_abort
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_delete
</UL>

<P><STRONG><a name="[e4]"></a>tick_list_update</STRONG> (Thumb, 314 bytes, Stack size 32 bytes, raw_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = tick_list_update &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_state_change
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_process
</UL>

<P><STRONG><a name="[af]"></a>tick_task_start</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, raw_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = tick_task_start &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[e7]"></a>raw_timer_activate</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, raw_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_priority_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_create
</UL>

<P><STRONG><a name="[e9]"></a>raw_timer_create</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, raw_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_activate
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>

<P><STRONG><a name="[ea]"></a>raw_timer_change</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, raw_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
</UL>

<P><STRONG><a name="[eb]"></a>raw_timer_deactivate</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, raw_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>

<P><STRONG><a name="[ed]"></a>raw_timer_delete</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, raw_timer.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
</UL>

<P><STRONG><a name="[ee]"></a>timer_task</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, raw_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = timer_task &rArr; raw_semaphore_get &rArr; raw_pend_object &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_priority_insert
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_timer.o(.text)
</UL>
<P><STRONG><a name="[c1]"></a>call_timer_task</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, raw_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = call_timer_task &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_time_tick
</UL>

<P><STRONG><a name="[ac]"></a>raw_timer_init</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, raw_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = raw_timer_init &rArr; raw_task_create &rArr; hybrid_int_process
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[69]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_delete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semphore_send_notify
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_get_information
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_delete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_flush
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_full_check
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_get_information
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_delete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_flush
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_full_check
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_receive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_send_notify
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_delete
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enable_sche
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_disable_sche
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_task
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_delete
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_process
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_post
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_iter_block_task
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_wait_abort
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_get_sched_way
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_set_sched_way
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_time_slice_change
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_set_task_user_point
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_priority_change
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_system_time_set
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
</UL>

<P><STRONG><a name="[6a]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_delete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semphore_send_notify
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_get_information
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_delete
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_flush
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_full_check
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_get_information
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_delete
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_flush
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_full_check
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_receive
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_send_notify
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_delete
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enable_sche
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_disable_sche
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_task
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_post
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_delete
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_event_get
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_process
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_post
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_iter_block_task
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_wait_abort
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_get_sched_way
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_set_sched_way
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_time_slice_change
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_set_task_user_point
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_delete
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_priority_change
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_system_time_set
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
</UL>

<P><STRONG><a name="[14d]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[14e]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>raw_start_first_task</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_start
</UL>

<P><STRONG><a name="[a8]"></a>port_task_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hybrid_int_process
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_process
</UL>

<P><STRONG><a name="[bd]"></a>raw_int_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
</UL>

<P><STRONG><a name="[b]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; raw_stack_check &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_stack_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>raw_sys_tick_init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = raw_sys_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[c]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; task_0_tick_post &rArr; raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_post
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c6]"></a>port_stack_init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, port.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = port_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>

<P><STRONG><a name="[ab]"></a>raw_os_init_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[d0]"></a>raw_task_delete_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_delete
</UL>

<P><STRONG><a name="[d6]"></a>raw_task_abort_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_wait_abort
</UL>

<P><STRONG><a name="[14f]"></a>raw_idle_task_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(.text), UNUSED)

<P><STRONG><a name="[150]"></a>raw_task_switch_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>raw_tick_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_0_tick_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_time_tick
</UL>

<P><STRONG><a name="[c5]"></a>task_create_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>

<P><STRONG><a name="[75]"></a>raw_idle_coroutine_hook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port_hook.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_task
</UL>

<P><STRONG><a name="[151]"></a>raw_memcpy</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, user_extension.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>raw_memset</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, user_extension.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = raw_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_init
</UL>

<P><STRONG><a name="[ef]"></a>simple_printf_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, simple_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = simple_printf_lock &rArr; raw_mutex_get &rArr;  raw_pend_object (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_snprintf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sprintf
</UL>

<P><STRONG><a name="[f0]"></a>simple_printf_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, simple_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = simple_printf_unlock &rArr; raw_mutex_put &rArr; change_internal_task_priority &rArr; mtx_chg_pri &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_snprintf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sprintf
</UL>

<P><STRONG><a name="[89]"></a>raw_printf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, simple_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_lock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_stack_check
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pend_obj
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_delete
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_deactivate
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_change
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_activate
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_msg_handler
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_time_tick
</UL>

<P><STRONG><a name="[f5]"></a>raw_sprintf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, simple_printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_lock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[f6]"></a>raw_snprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, simple_printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_unlock
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_lock
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[f7]"></a>raw_printf_init</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, simple_printf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_create
</UL>

<P><STRONG><a name="[152]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[153]"></a>__rt_heap_escrow$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[154]"></a>__rt_heap_expand$2region</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[4d]"></a>exit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[155]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[f8]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[156]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[51]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[157]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[158]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, indicate_semi.o(.text), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[38]"></a>sys_init_task</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, sys_init.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = sys_init_task &rArr; raw_task_suspend &rArr; int_msg_post &rArr; raw_task_0_post &rArr; task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_suspend
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_identify
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sys_tick_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.text)
</UL>
<P><STRONG><a name="[5c]"></a>sys_len_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sys_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_len_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
</UL>

<P><STRONG><a name="[5e]"></a>sys_led_on</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
</UL>

<P><STRONG><a name="[60]"></a>sys_led_off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_led.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
</UL>

<P><STRONG><a name="[39]"></a>sys_led_task</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, sys_led.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = sys_led_task &rArr; raw_sleep &rArr; remove_ready_list &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_off
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_on
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_len_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_led.o(.text)
</UL>
<P><STRONG><a name="[62]"></a>SetSysClockTo72</STRONG> (Thumb, 212 bytes, Stack size 12 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[61]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[78]"></a>release_mutex</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, raw_mutex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = release_mutex &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_delete
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_state_change
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx_chg_pri
</UL>

<P><STRONG><a name="[77]"></a>is_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw_mutex.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_delete
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_free_mutex
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chg_pri_mutex
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
</UL>

<P><STRONG><a name="[81]"></a>list_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, raw_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_priority_list
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
</UL>

<P><STRONG><a name="[80]"></a>add_to_priority_list</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = add_to_priority_list
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pend_list_priority
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
</UL>

<P><STRONG><a name="[83]"></a>bit_set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
</UL>

<P><STRONG><a name="[8b]"></a>pend_task_wake_up</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, raw_pend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + In Cycle
<LI>Call Chain = pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_send_msg_size
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_send_msg
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
</UL>

<P><STRONG><a name="[87]"></a>list_delete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, raw_pend.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pend_list_priority
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delete_pend_obj
</UL>

<P><STRONG><a name="[92]"></a>is_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw_queue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_delete
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
</UL>

<P><STRONG><a name="[9e]"></a>is_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw_queue_size.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_delete
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
</UL>

<P><STRONG><a name="[b3]"></a>is_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw_sem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_delete
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
</UL>

<P><STRONG><a name="[cf]"></a>list_delete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, raw_task.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_wait_abort
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_delete
</UL>

<P><STRONG><a name="[3f]"></a>task_0_tick_handler</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, raw_task_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = task_0_tick_handler &rArr; raw_task_semaphore_put &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_tick_hook
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_put
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_timer_task
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_task_0.o(.text)
</UL>
<P><STRONG><a name="[d8]"></a>task_0_post</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, raw_task_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = task_0_post
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_front_post
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_post
</UL>

<P><STRONG><a name="[3e]"></a>task_0_process</STRONG> (Thumb, 160 bytes, Stack size 0 bytes, raw_task_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 44 + Unknown Stack Size
<LI>Call Chain = task_0_process &rArr; remove_ready_list &rArr;  raw_printf (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_task_switch
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_task
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_task_0.o(.text)
</UL>
<P><STRONG><a name="[3d]"></a>int_msg_handler</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, raw_task_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = int_msg_handler &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_post
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_set
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_task_0.o(.text)
</UL>
<P><STRONG><a name="[dc]"></a>int_msg_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, raw_task_0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = int_msg_init &rArr; raw_memset
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_0_init
</UL>

<P><STRONG><a name="[40]"></a>tick_task_process</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, raw_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = tick_task_process &rArr; raw_task_semaphore_get &rArr; raw_semaphore_get &rArr; raw_pend_object &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_tick.o(.text)
</UL>
<P><STRONG><a name="[e3]"></a>list_delete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, raw_tick.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[e2]"></a>tick_list_priority_insert</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, raw_tick.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tick_list_priority_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
</UL>

<P><STRONG><a name="[e5]"></a>timer_list_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, raw_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
</UL>

<P><STRONG><a name="[e8]"></a>timer_list_priority_insert</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, raw_timer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_list_priority_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_activate
</UL>

<P><STRONG><a name="[ec]"></a>timer_list_remove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, raw_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_delete
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_deactivate
</UL>

<P><STRONG><a name="[e6]"></a>list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw_timer.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_create
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_init
</UL>

<P><STRONG><a name="[f2]"></a>printchar</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, simple_printf.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
</UL>

<P><STRONG><a name="[f1]"></a>prints</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, simple_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = prints
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
</UL>

<P><STRONG><a name="[f3]"></a>printi</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, simple_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[f4]"></a>print</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, simple_printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = print &rArr; printi &rArr; prints
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_snprintf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sprintf
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
