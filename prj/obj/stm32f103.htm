<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\stm32f103.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\stm32f103.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060020: Last Updated: Wed Nov 18 20:22:55 2015
<BR><P>
<H3>Maximum Stack Usage =        460 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
debug_shell_task &rArr; cli_loop &rArr; cli_simple_loop &rArr; cli_readline &rArr; cli_readline_into_buffer &rArr; cread_line &rArr; cmd_auto_complete &rArr; complete_cmdv &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[f0]">OS_CPU_SR_Save</a>
 <LI><a href="#[f2]">OS_CPU_SR_Restore</a>
 <LI><a href="#[1cb]">CPU_IntDis</a>
 <LI><a href="#[1cc]">CPU_IntEn</a>
 <LI><a href="#[197]">raw_start_first_task</a>
 <LI><a href="#[19d]">port_task_switch</a>
 <LI><a href="#[18d]">raw_int_switch</a>
 <LI><a href="#[12]">PendSV_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[d]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">MemManage_Handler</a><BR>
 <LI><a href="#[e]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e]">BusFault_Handler</a><BR>
 <LI><a href="#[f]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f]">UsageFault_Handler</a><BR>
 <LI><a href="#[10]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[10]">SVC_Handler</a><BR>
 <LI><a href="#[11]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">DebugMon_Handler</a><BR>
 <LI><a href="#[26]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[f8]">mtx_chg_pri</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f5]">change_internal_task_priority</a><BR>
 <LI><a href="#[181]">release_mutex</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[f5]">change_internal_task_priority</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[26]">ADC1_2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[43]">ADC3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[e]">BusFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[29]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2a]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[20]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[21]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[22]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[23]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[24]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[25]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4c]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4d]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4e]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4f]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[11]">DebugMon_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1a]">EXTI0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3c]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1b]">EXTI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1c]">EXTI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1d]">EXTI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[1e]">EXTI4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2b]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[18]">FLASH_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[44]">FSMC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[c]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[34]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[33]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[36]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[35]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[d]">MemManage_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[b]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[15]">PVD_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[12]">PendSV_Handler</a> from cpu.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[19]">RCC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3d]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[17]">RTC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[a]">Reset_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[45]">SDIO_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[37]">SPI1_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[38]">SPI2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[47]">SPI3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[10]">SVC_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[13]">SysTick_Handler</a> from port.o(i.SysTick_Handler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[51]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[16]">TAMPER_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2c]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2f]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2e]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[2d]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[30]">TIM2_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[31]">TIM3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[32]">TIM4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[46]">TIM5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4a]">TIM6_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[4b]">TIM7_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3f]">TIM8_BRK_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[42]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[41]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[40]">TIM8_UP_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[48]">UART4_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[49]">UART5_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[39]">USART1_IRQHandler</a> from debug_uart.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3a]">USART2_IRQHandler</a> from sys_uart.o(i.USART2_IRQHandler) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3b]">USART3_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[3e]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[27]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[28]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[f]">UsageFault_Handler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[14]">WWDG_IRQHandler</a> from startup_stm32f10x_hd.o(.text) referenced from startup_stm32f10x_hd.o(RESET)
 <LI><a href="#[52]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_hd.o(.text)
 <LI><a href="#[3]">cli_getc</a> from cli_port.o(i.cli_getc) referenced 2 times from cli_port.o(.data)
 <LI><a href="#[0]">cli_putc</a> from cli_port.o(i.cli_putc) referenced 2 times from cli_port.o(.data)
 <LI><a href="#[2]">cli_putnstr</a> from cli_port.o(i.cli_putnstr) referenced 2 times from cli_port.o(.data)
 <LI><a href="#[1]">cli_puts</a> from cli_port.o(i.cli_puts) referenced 2 times from cli_port.o(.data)
 <LI><a href="#[55]">cpu_task</a> from raw_stat.o(i.cpu_task) referenced from raw_stat.o(i.cpu_task_start)
 <LI><a href="#[53]">debug_fifo_read</a> from debug_uart.o(i.debug_fifo_read) referenced from debug_uart.o(i.USART1_IRQHandler)
 <LI><a href="#[59]">debug_shell_task</a> from debug_uart.o(i.debug_shell_task) referenced from debug_uart.o(i.shell_init)
 <LI><a href="#[5]">do_help</a> from cmds.o(i.do_help) referenced 2 times from cmds.o(.data)
 <LI><a href="#[6]">do_reboot</a> from cmds.o(i.do_reboot) referenced 2 times from cmds.o(.data)
 <LI><a href="#[7]">do_stack</a> from cmds.o(i.do_stack) referenced 2 times from cmds.o(.data)
 <LI><a href="#[9]">do_state</a> from cmds.o(i.do_state) referenced 2 times from cmds.o(.data)
 <LI><a href="#[8]">do_version</a> from cmds.o(i.do_version) referenced 2 times from cmds.o(.data)
 <LI><a href="#[54]">fputc</a> from sys_uart.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[50]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[57]">raw_idle_task</a> from raw_idle.o(i.raw_idle_task) referenced from raw_sched.o(i.raw_os_init)
 <LI><a href="#[4]">raw_printf</a> from simple_printf.o(i.raw_printf) referenced 2 times from cli_port.o(.data)
 <LI><a href="#[60]">shell_init</a> from debug_uart.o(i.shell_init) referenced from sys_init.o(.constdata)
 <LI><a href="#[56]">sys_init_task</a> from sys_init.o(i.sys_init_task) referenced from sys_init.o(i.create_init_task)
 <LI><a href="#[5f]">sys_led_init</a> from sys_led.o(i.sys_led_init) referenced from sys_init.o(.constdata)
 <LI><a href="#[5a]">sys_led_task</a> from sys_led.o(i.sys_led_task) referenced from sys_led.o(i.sys_led_init)
 <LI><a href="#[63]">sys_motor_init</a> from motor.o(i.sys_motor_init) referenced from sys_init.o(.constdata)
 <LI><a href="#[5b]">sys_motor_task</a> from motor.o(i.sys_motor_task) referenced from motor.o(i.sys_motor_init)
 <LI><a href="#[62]">sys_mpu_init</a> from mpu6050.o(i.sys_mpu_init) referenced from sys_init.o(.constdata)
 <LI><a href="#[5c]">sys_mpu_task</a> from mpu6050.o(i.sys_mpu_task) referenced from mpu6050.o(i.sys_mpu_init)
 <LI><a href="#[61]">sys_uart_init</a> from sys_uart.o(i.sys_uart_init) referenced from sys_init.o(.constdata)
 <LI><a href="#[5d]">sys_uart_task</a> from sys_uart.o(i.sys_uart_task) referenced from sys_uart.o(i.sys_uart_init)
 <LI><a href="#[5e]">tick_task_process</a> from raw_tick.o(i.tick_task_process) referenced from raw_tick.o(i.tick_task_start)
 <LI><a href="#[58]">timer_task</a> from raw_timer.o(i.timer_task) referenced from raw_timer.o(i.raw_timer_init)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[52]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[1c5]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[64]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[81]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c6]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c7]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c8]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c9]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1ca]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[a]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_hd.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[f0]"></a>OS_CPU_SR_Save</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_get_information
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_write
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_cahce_empty
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fifo_init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_out_all
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_in
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enable_sche
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_disable_sche
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_system_error_process
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_task
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_block_release
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_block_allocate
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[f2]"></a>OS_CPU_SR_Restore</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_get_information
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_out_all
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_in
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enable_sche
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_disable_sche
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_init
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_task
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_block_release
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_block_allocate
</UL>

<P><STRONG><a name="[1cb]"></a>CPU_IntDis</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>CPU_IntEn</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>raw_start_first_task</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_start
</UL>

<P><STRONG><a name="[19d]"></a>port_task_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
</UL>

<P><STRONG><a name="[18d]"></a>raw_int_switch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
</UL>

<P><STRONG><a name="[12]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, cpu.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = PendSV_Handler &rArr; raw_stack_check &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_stack_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6a]"></a>__aeabi_ldivmod</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, ldiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __aeabi_ldivmod &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[1cd]"></a>___aeabi_memcpy4$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1ce]"></a>___aeabi_memcpy8$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1cf]"></a>__aeabi_memcpy</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[11f]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_char
</UL>

<P><STRONG><a name="[1d0]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[1d1]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmovea.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[ca]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_RxInt
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[116]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd_tbl
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
</UL>

<P><STRONG><a name="[fe]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd_tbl
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_argv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_common_prefix
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_macros
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_puts
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_run_command
</UL>

<P><STRONG><a name="[d7]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
</UL>

<P><STRONG><a name="[117]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
</UL>

<P><STRONG><a name="[104]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_to_hist
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_run_command
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_loop
</UL>

<P><STRONG><a name="[15c]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd_tbl
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_fadd</STRONG> (Thumb, 164 bytes, Stack size 16 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_fsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[72]"></a>__aeabi_frsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[153]"></a>__aeabi_fmul</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
</UL>

<P><STRONG><a name="[73]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[74]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[79]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_i2f</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[7d]"></a>__aeabi_ui2f</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
</UL>

<P><STRONG><a name="[7e]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
</UL>

<P><STRONG><a name="[1ae]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[154]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
</UL>

<P><STRONG><a name="[7f]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_f2d</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
</UL>

<P><STRONG><a name="[80]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[e0]"></a>__aeabi_cfcmpeq</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[e2]"></a>__aeabi_cfcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[e1]"></a>__aeabi_cfrcmple</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, cfrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[69]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1d5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1d6]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1d7]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[1d8]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>_float_round</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[6f]"></a>_float_epilogue</STRONG> (Thumb, 92 bytes, Stack size 4 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[77]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[76]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>

<P><STRONG><a name="[d1]"></a>__ARM_scalbn</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1d9]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[65]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1da]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[82]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[1db]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1dc]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[8c]"></a>GPIO_Init</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_len_init
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Gpio_Output_AFPP
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Gpio_Input_INFLOATING
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[95]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[8d]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
</UL>

<P><STRONG><a name="[83]"></a>GetCmd</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, sys_uart.o(i.GetCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = GetCmd &rArr; Uartx_Receive_T &rArr; raw_semaphore_get &rArr; raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Receive_T
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uart_task
</UL>

<P><STRONG><a name="[c]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>MPU_Get_Gyroscope</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, mpu6050.o(i.MPU_Get_Gyroscope))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MPU_Get_Gyroscope &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mpu_task
</UL>

<P><STRONG><a name="[87]"></a>MPU_IIC_Ack</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mpuiic.o(i.MPU_IIC_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Ack &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>

<P><STRONG><a name="[88]"></a>MPU_IIC_Delay</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, mpuiic.o(i.MPU_IIC_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_NAck
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Ack
</UL>

<P><STRONG><a name="[8a]"></a>MPU_IIC_Init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, mpuiic.o(i.MPU_IIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MPU_IIC_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[8e]"></a>MPU_IIC_NAck</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, mpuiic.o(i.MPU_IIC_NAck))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>

<P><STRONG><a name="[8f]"></a>MPU_IIC_Read_Byte</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, mpuiic.o(i.MPU_IIC_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_NAck
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Delay
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[90]"></a>MPU_IIC_Send_Byte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, mpuiic.o(i.MPU_IIC_Send_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Send_Byte &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[91]"></a>MPU_IIC_Start</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, mpuiic.o(i.MPU_IIC_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Start &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[92]"></a>MPU_IIC_Stop</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, mpuiic.o(i.MPU_IIC_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[93]"></a>MPU_IIC_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mpuiic.o(i.MPU_IIC_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
</UL>

<P><STRONG><a name="[94]"></a>MPU_Init</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, mpu6050.o(i.MPU_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = MPU_Init &rArr; MPU_Set_Rate &rArr; MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Byte
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mpu_task
</UL>

<P><STRONG><a name="[9b]"></a>MPU_Read_Byte</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mpu6050.o(i.MPU_Read_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = MPU_Read_Byte &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[86]"></a>MPU_Read_Len</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, mpu6050.o(i.MPU_Read_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Read_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
</UL>

<P><STRONG><a name="[99]"></a>MPU_Set_Accel_Fsr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Set_Accel_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = MPU_Set_Accel_Fsr &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[98]"></a>MPU_Set_Gyro_Fsr</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, mpu6050.o(i.MPU_Set_Gyro_Fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = MPU_Set_Gyro_Fsr &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[9c]"></a>MPU_Set_LPF</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mpu6050.o(i.MPU_Set_LPF))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
</UL>

<P><STRONG><a name="[9a]"></a>MPU_Set_Rate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, mpu6050.o(i.MPU_Set_Rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = MPU_Set_Rate &rArr; MPU_Set_LPF &rArr; MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Byte
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[96]"></a>MPU_Write_Byte</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, mpu6050.o(i.MPU_Write_Byte))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = MPU_Write_Byte &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Rate
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_LPF
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Gyro_Fsr
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Set_Accel_Fsr
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
</UL>

<P><STRONG><a name="[9d]"></a>MPU_Write_Len</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, mpu6050.o(i.MPU_Write_Len))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Wait_Ack
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Stop
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Start
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Send_Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[b]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[ae]"></a>NVIC_Init</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Nvic_Config
</UL>

<P><STRONG><a name="[9e]"></a>PWM_Config</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, pwm.o(i.PWM_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = PWM_Config &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4PreloadConfig
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC4Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3PreloadConfig
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC3Init
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ARRPreloadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[ab]"></a>Pub_Gpio_Input_INFLOATING</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pub.o(i.Pub_Gpio_Input_INFLOATING))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pub_Gpio_Input_INFLOATING &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart1_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usart2_init
</UL>

<P><STRONG><a name="[ac]"></a>Pub_Gpio_Output_AFPP</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, pub.o(i.Pub_Gpio_Output_AFPP))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pub_Gpio_Output_AFPP &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart1_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usart2_init
</UL>

<P><STRONG><a name="[ad]"></a>Pub_Nvic_Config</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, pub.o(i.Pub_Nvic_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Pub_Nvic_Config &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart1_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usart2_init
</UL>

<P><STRONG><a name="[af]"></a>Pub_Uart_Hardware_Cfg</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, pub.o(i.Pub_Uart_Hardware_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = Pub_Uart_Hardware_Cfg &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart1_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usart2_init
</UL>

<P><STRONG><a name="[b2]"></a>Pub_Uart_Int_Cfg</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pub.o(i.Pub_Uart_Int_Cfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Pub_Uart_Int_Cfg &rArr; USART_ITConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart1_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usart2_init
</UL>

<P><STRONG><a name="[163]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9f]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usart2_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c3]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[8b]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart1_init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usart2_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c2]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[c4]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 192 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[136]"></a>SysTick_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, misc.o(i.SysTick_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[13]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, port.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; raw_time_tick &rArr; raw_task_semaphore_put &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_time_tick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>SystemInit</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SystemInit &rArr; SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(.text)
</UL>
<P><STRONG><a name="[a9]"></a>TIM_ARRPreloadConfig</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ARRPreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[aa]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a1]"></a>TIM_OC1Init</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a2]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a3]"></a>TIM_OC2Init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a4]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a5]"></a>TIM_OC3Init</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a6]"></a>TIM_OC3PreloadConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a7]"></a>TIM_OC4Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f10x_tim.o(i.TIM_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TIM_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[a8]"></a>TIM_OC4PreloadConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[1bb]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
</UL>

<P><STRONG><a name="[1bc]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
</UL>

<P><STRONG><a name="[1bd]"></a>TIM_SetCompare3</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare3))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
</UL>

<P><STRONG><a name="[1be]"></a>TIM_SetCompare4</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_SetCompare4))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
</UL>

<P><STRONG><a name="[a0]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 122 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>

<P><STRONG><a name="[39]"></a>USART1_IRQHandler</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, debug_uart.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = USART1_IRQHandler &rArr; serial_fifo_int_recv &rArr; serial_append &rArr; raw_queue_size_end_post &rArr; msg_size_post &rArr; wake_send_msg_size &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_int_recv
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>USART2_IRQHandler</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sys_uart.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = USART2_IRQHandler &rArr; Uartx_RxInt &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_RxInt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_hd.o(RESET)
</UL>
<P><STRONG><a name="[b5]"></a>USART_ClearFlag</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Int_Cfg
</UL>

<P><STRONG><a name="[bd]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[b0]"></a>USART_ClockInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ClockInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ClockInit
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Hardware_Cfg
</UL>

<P><STRONG><a name="[b4]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Int_Cfg
</UL>

<P><STRONG><a name="[c0]"></a>USART_DeInit</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[c6]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_SendBuf
</UL>

<P><STRONG><a name="[bb]"></a>USART_GetITStatus</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[b3]"></a>USART_ITConfig</STRONG> (Thumb, 74 bytes, Stack size 20 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Int_Cfg
</UL>

<P><STRONG><a name="[b1]"></a>USART_Init</STRONG> (Thumb, 210 bytes, Stack size 56 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Hardware_Cfg
</UL>

<P><STRONG><a name="[c7]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_SendBuf
</UL>

<P><STRONG><a name="[c5]"></a>USARTx_SendBuf</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, sys_uart.o(i.USARTx_SendBuf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USARTx_SendBuf
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uart_task
</UL>

<P><STRONG><a name="[84]"></a>Uartx_Receive_T</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sys_uart.o(i.Uartx_Receive_T))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = Uartx_Receive_T &rArr; raw_semaphore_get &rArr; raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_out_all
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmd
</UL>

<P><STRONG><a name="[be]"></a>Uartx_RxInt</STRONG> (Thumb, 52 bytes, Stack size 144 bytes, sys_uart.o(i.Uartx_RxInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = Uartx_RxInt &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_in
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1dd]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[16f]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[eb]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[cf]"></a>__kernel_poly</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[115]"></a>__ll_entry_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmds.o(i.__ll_entry_count))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
</UL>

<P><STRONG><a name="[114]"></a>__ll_entry_start</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, cmds.o(i.__ll_entry_start))
<BR><BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
</UL>

<P><STRONG><a name="[d0]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_infnan &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[d2]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[d3]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[d4]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[1de]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1df]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1e0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ea]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[d5]"></a>_do_help</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, command.o(i._do_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _do_help &rArr; ctrlc &rArr; tstc &rArr; debug_cahce_empty &rArr; raw_queue_size_get_information
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd_tbl
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlc
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_help
</UL>

<P><STRONG><a name="[e3]"></a>add_ready_list</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, raw_pend.o(i.add_ready_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>

<P><STRONG><a name="[e4]"></a>add_ready_list_end</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, raw_pend.o(i.add_ready_list_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[e5]"></a>add_ready_list_head</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, raw_pend.o(i.add_ready_list_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[e9]"></a>asin</STRONG> (Thumb, 572 bytes, Stack size 56 bytes, asin.o(i.asin))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = asin &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[ed]"></a>atan</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
</UL>

<P><STRONG><a name="[ee]"></a>atan2</STRONG> (Thumb, 346 bytes, Stack size 32 bytes, atan2.o(i.atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = atan2 &rArr; atan &rArr; __kernel_poly &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[1ac]"></a>bit_search_first_one</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, raw_system.o(i.bit_search_first_one))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = bit_search_first_one
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
</UL>

<P><STRONG><a name="[ef]"></a>block_state_post_process</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, raw_system.o(i.block_state_post_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = block_state_post_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
</UL>

<P><STRONG><a name="[f1]"></a>calculate_time_slice</STRONG> (Thumb, 150 bytes, Stack size 24 bytes, raw_sched.o(i.calculate_time_slice))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = calculate_time_slice &rArr; move_to_ready_list_end
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_time_tick
</UL>

<P><STRONG><a name="[f4]"></a>call_timer_task</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, raw_timer.o(i.call_timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = call_timer_task &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_time_tick
</UL>

<P><STRONG><a name="[f5]"></a>change_internal_task_priority</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, raw_task.o(i.change_internal_task_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = change_internal_task_priority &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pend_list_priority
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx_chg_pri
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx_chg_pri
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
</UL>

<P><STRONG><a name="[f7]"></a>change_pend_list_priority</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, raw_pend.o(i.change_pend_list_priority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = change_pend_list_priority &rArr; add_to_priority_list
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_priority_list
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[107]"></a>clear_ctrlc</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, cli_port.o(i.clear_ctrlc))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_run_command
</UL>

<P><STRONG><a name="[130]"></a>cli_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cli.o(i.cli_init))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_shell_task
</UL>

<P><STRONG><a name="[fb]"></a>cli_loop</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, cli.o(i.cli_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = cli_loop &rArr; cli_simple_loop &rArr; cli_readline &rArr; cli_readline_into_buffer &rArr; cread_line &rArr; cmd_auto_complete &rArr; complete_cmdv &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_shell_task
</UL>

<P><STRONG><a name="[ff]"></a>cli_readline</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, cli_readline.o(i.cli_readline))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = cli_readline &rArr; cli_readline_into_buffer &rArr; cread_line &rArr; cmd_auto_complete &rArr; complete_cmdv &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_readline_into_buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_loop
</UL>

<P><STRONG><a name="[100]"></a>cli_readline_into_buffer</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, cli_readline.o(i.cli_readline_into_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 444 + Unknown Stack Size
<LI>Call Chain = cli_readline_into_buffer &rArr; cread_line &rArr; cmd_auto_complete &rArr; complete_cmdv &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_init
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_readline
</UL>

<P><STRONG><a name="[fc]"></a>cli_simple_loop</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, cli_simple.o(i.cli_simple_loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 452 + Unknown Stack Size
<LI>Call Chain = cli_simple_loop &rArr; cli_readline &rArr; cli_readline_into_buffer &rArr; cread_line &rArr; cmd_auto_complete &rArr; complete_cmdv &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bootretry_reset_cmd_timeout
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_readline
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command_repeatable
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_loop
</UL>

<P><STRONG><a name="[109]"></a>cli_simple_parse_line</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, cli_simple.o(i.cli_simple_parse_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = cli_simple_parse_line
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_run_command
</UL>

<P><STRONG><a name="[106]"></a>cli_simple_run_command</STRONG> (Thumb, 244 bytes, Stack size 232 bytes, cli_simple.o(i.cli_simple_run_command))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = cli_simple_run_command &rArr; process_macros
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_parse_line
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_macros
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;had_ctrlc
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clear_ctrlc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_command_repeatable
</UL>

<P><STRONG><a name="[10c]"></a>cmd_auto_complete</STRONG> (Thumb, 400 bytes, Stack size 184 bytes, command.o(i.cmd_auto_complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = cmd_auto_complete &rArr; complete_cmdv &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_argv
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;make_argv
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_common_prefix
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[10a]"></a>cmd_process</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, command.o(i.cmd_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = cmd_process &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_usage
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_timer
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_call
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_run_command
</UL>

<P><STRONG><a name="[db]"></a>cmd_usage</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, command.o(i.cmd_usage))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cmd_usage
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[119]"></a>cpu_task_init</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, raw_stat.o(i.cpu_task_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = cpu_task_init &rArr; raw_task_suspend &rArr; task_suspend &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_suspend
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_resume
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[11c]"></a>cpu_task_start</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, raw_stat.o(i.cpu_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = cpu_task_start &rArr; raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[125]"></a>create_init_task</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, sys_init.o(i.create_init_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = create_init_task &rArr; raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d8]"></a>ctrlc</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, cli_port.o(i.ctrlc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = ctrlc &rArr; tstc &rArr; debug_cahce_empty &rArr; raw_queue_size_get_information
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tstc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
</UL>

<P><STRONG><a name="[126]"></a>debug_cahce_empty</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, debug_uart.o(i.debug_cahce_empty))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = debug_cahce_empty &rArr; raw_queue_size_get_information
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_get_information
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tstc
</UL>

<P><STRONG><a name="[12b]"></a>debug_putc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, debug_uart.o(i.debug_putc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>

<P><STRONG><a name="[fa]"></a>debug_read</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, debug_uart.o(i.debug_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = debug_read &rArr; serial_read &rArr; serial_read_noblock &rArr; serial_fifo_cache_refresh &rArr; raw_queue_size_receive &rArr; raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getc
</UL>

<P><STRONG><a name="[12e]"></a>debug_serial_init</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, debug_uart.o(i.debug_serial_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = debug_serial_init &rArr; debug_uart_init &rArr; debug_usart1_init &rArr; Pub_Uart_Hardware_Cfg &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fifo_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[fd]"></a>debug_write</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, debug_uart.o(i.debug_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = debug_write &rArr; raw_mutex_get &rArr; change_internal_task_priority &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_puts
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_putnstr
</UL>

<P><STRONG><a name="[135]"></a>delay_init</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, sys_delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = delay_init
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_CLKSourceConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[97]"></a>delay_ms</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, sys_delay.o(i.delay_ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = delay_ms &rArr; raw_sleep &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
</UL>

<P><STRONG><a name="[89]"></a>delay_us</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, sys_delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enable_sche
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_disable_sche
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Delay
</UL>

<P><STRONG><a name="[139]"></a>dmp_enable_6x_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_6x_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dmp_enable_6x_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[13c]"></a>dmp_enable_feature</STRONG> (Thumb, 530 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_feature))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = dmp_enable_feature &rArr; dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[13d]"></a>dmp_enable_gyro_cal</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_gyro_cal))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dmp_enable_gyro_cal &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[146]"></a>dmp_enable_lp_quat</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_enable_lp_quat))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dmp_enable_lp_quat &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[147]"></a>dmp_load_motion_driver_firmware</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_load_motion_driver_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = dmp_load_motion_driver_firmware &rArr; mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[149]"></a>dmp_read_fifo</STRONG> (Thumb, 456 bytes, Stack size 88 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_read_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;decode_gesture
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mget_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
</UL>

<P><STRONG><a name="[14d]"></a>dmp_set_accel_bias</STRONG> (Thumb, 300 bytes, Stack size 48 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_accel_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dmp_set_accel_bias &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[14f]"></a>dmp_set_fifo_rate</STRONG> (Thumb, 96 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_fifo_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dmp_set_fifo_rate &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[150]"></a>dmp_set_gyro_bias</STRONG> (Thumb, 294 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_gyro_bias))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dmp_set_gyro_bias &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[151]"></a>dmp_set_orientation</STRONG> (Thumb, 290 bytes, Stack size 32 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_orientation))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = dmp_set_orientation &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[143]"></a>dmp_set_shake_reject_thresh</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = dmp_set_shake_reject_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[144]"></a>dmp_set_shake_reject_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dmp_set_shake_reject_time &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[145]"></a>dmp_set_shake_reject_timeout</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_shake_reject_timeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dmp_set_shake_reject_timeout &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[13f]"></a>dmp_set_tap_axes</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_axes))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dmp_set_tap_axes &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[140]"></a>dmp_set_tap_count</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dmp_set_tap_count &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[13e]"></a>dmp_set_tap_thresh</STRONG> (Thumb, 396 bytes, Stack size 40 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_thresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = dmp_set_tap_thresh &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[141]"></a>dmp_set_tap_time</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dmp_set_tap_time &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[142]"></a>dmp_set_tap_time_multi</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, inv_mpu_dmp_motion_driver.o(i.dmp_set_tap_time_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = dmp_set_tap_time_multi &rArr; mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
</UL>

<P><STRONG><a name="[cb]"></a>fifo_in</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, fifo.o(i.fifo_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = fifo_in &rArr; fifo_copy_in &rArr; raw_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_unused
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_copy_in
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_RxInt
</UL>

<P><STRONG><a name="[159]"></a>fifo_init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, fifo.o(i.fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = fifo_init
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_power_of_2
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uart_task
</UL>

<P><STRONG><a name="[c9]"></a>fifo_out_all</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, fifo.o(i.fifo_out_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = fifo_out_all &rArr; internal_fifo_out_peek &rArr; kfifo_copy_out &rArr; raw_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_fifo_out_peek
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Receive_T
</UL>

<P><STRONG><a name="[111]"></a>find_cmd</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, command.o(i.find_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ll_entry_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ll_entry_count
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd_tbl
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;complete_cmdv
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[da]"></a>find_cmd_tbl</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, command.o(i.find_cmd_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
</UL>

<P><STRONG><a name="[54]"></a>fputc</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, sys_uart.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[d9]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
</UL>

<P><STRONG><a name="[18c]"></a>get_ready_task</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, raw_pend.o(i.get_ready_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_ready_task
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_start
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
</UL>

<P><STRONG><a name="[1b7]"></a>get_shell_task_obj</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, debug_uart.o(i.get_shell_task_obj))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[10b]"></a>had_ctrlc</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, cli_port.o(i.had_ctrlc))
<BR><BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_run_command
</UL>

<P><STRONG><a name="[160]"></a>inv_orientation_matrix_to_scalar</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, inv_mpu.o(i.inv_orientation_matrix_to_scalar))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = inv_orientation_matrix_to_scalar
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_row_2_scale
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[161]"></a>inv_row_2_scale</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, inv_mpu.o(i.inv_row_2_scale))
<BR><BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>

<P><STRONG><a name="[50]"></a>main</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 140 + Unknown Stack Size
<LI>Call Chain = main &rArr; raw_os_init &rArr; tick_task_start &rArr; raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_start
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_init_task
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[d6]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
</UL>

<P><STRONG><a name="[14c]"></a>mget_ms</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, inv_mpu.o(i.mget_ms))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[f3]"></a>move_to_ready_list_end</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, raw_pend.o(i.move_to_ready_list_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = move_to_ready_list_end
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
</UL>

<P><STRONG><a name="[165]"></a>mpu_configure_fifo</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_configure_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[167]"></a>mpu_dmp_get_data</STRONG> (Thumb, 544 bytes, Stack size 136 bytes, inv_mpu.o(i.mpu_dmp_get_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan2
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mpu_task
</UL>

<P><STRONG><a name="[169]"></a>mpu_dmp_init</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_dmp_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = mpu_dmp_init &rArr; run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_IIC_Init
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;inv_orientation_matrix_to_scalar
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mpu_task
</UL>

<P><STRONG><a name="[152]"></a>mpu_get_accel_fsr</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[14e]"></a>mpu_get_accel_sens</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_accel_sens))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[17b]"></a>mpu_get_fifo_config</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_fifo_config))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[178]"></a>mpu_get_gyro_fsr</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_fsr))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[1ad]"></a>mpu_get_gyro_sens</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_gyro_sens))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[179]"></a>mpu_get_lpf</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_lpf))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[17a]"></a>mpu_get_sample_rate</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, inv_mpu.o(i.mpu_get_sample_rate))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[16a]"></a>mpu_init</STRONG> (Thumb, 416 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mpu_init &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[148]"></a>mpu_load_firmware</STRONG> (Thumb, 180 bytes, Stack size 48 bytes, inv_mpu.o(i.mpu_load_firmware))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mpu_load_firmware &rArr; mpu_read_mem &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_write_mem
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_mem
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_load_motion_driver_firmware
</UL>

<P><STRONG><a name="[175]"></a>mpu_lp_accel_mode</STRONG> (Thumb, 218 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_lp_accel_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
</UL>

<P><STRONG><a name="[14a]"></a>mpu_read_fifo_stream</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_fifo_stream))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[174]"></a>mpu_read_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_read_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mpu_read_mem &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[13b]"></a>mpu_reset_fifo</STRONG> (Thumb, 450 bytes, Stack size 8 bytes, inv_mpu.o(i.mpu_reset_fifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = mpu_reset_fifo &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_read_fifo_stream
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[177]"></a>mpu_run_self_test</STRONG> (Thumb, 278 bytes, Stack size 88 bytes, inv_mpu.o(i.mpu_run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 272 + Unknown Stack Size
<LI>Call Chain = mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_gyro_fsr
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_accel_fsr
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_sample_rate
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_lpf
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_fsr
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_fifo_config
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_fsr
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gyro_self_test
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_st_biases
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_self_test
</UL>

<P><STRONG><a name="[171]"></a>mpu_set_accel_fsr</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_accel_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mpu_set_accel_fsr &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[173]"></a>mpu_set_bypass</STRONG> (Thumb, 328 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_bypass))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = mpu_set_bypass &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[16e]"></a>mpu_set_dmp_state</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_dmp_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_bypass
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_reset_fifo
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_int_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[170]"></a>mpu_set_gyro_fsr</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_gyro_fsr))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mpu_set_gyro_fsr &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[176]"></a>mpu_set_int_latched</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_int_latched))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mpu_set_int_latched &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sensors
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>

<P><STRONG><a name="[172]"></a>mpu_set_lpf</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_lpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = mpu_set_lpf &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_sample_rate
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[16c]"></a>mpu_set_sample_rate</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sample_rate))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_lpf
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_lp_accel_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[16b]"></a>mpu_set_sensors</STRONG> (Thumb, 202 bytes, Stack size 16 bytes, inv_mpu.o(i.mpu_set_sensors))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = mpu_set_sensors &rArr; mpu_set_int_latched &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_int_latched
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_init
</UL>

<P><STRONG><a name="[13a]"></a>mpu_write_mem</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, inv_mpu.o(i.mpu_write_mem))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = mpu_write_mem &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time_multi
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_time
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_thresh
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_count
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_tap_axes
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_timeout
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_time
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_shake_reject_thresh
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_lp_quat
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_gyro_cal
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_6x_lp_quat
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_orientation
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_fifo_rate
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_enable_feature
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_load_firmware
</UL>

<P><STRONG><a name="[17c]"></a>msg_size_post</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, raw_queue_size.o(i.msg_size_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = msg_size_post &rArr; wake_send_msg_size &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_send_msg_size
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_end_post
</UL>

<P><STRONG><a name="[f8]"></a>mtx_chg_pri</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, raw_mutex.o(i.mtx_chg_pri))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
 + In Cycle
<LI>Call Chain = mtx_chg_pri &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_system_error_process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
</UL>

<P><STRONG><a name="[182]"></a>mutex_state_change</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, raw_mutex.o(i.mutex_state_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = mutex_state_change &rArr; release_mutex &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
</UL>

<P><STRONG><a name="[18b]"></a>port_isr_stack_check</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port.o(i.port_isr_stack_check))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_finish_int
</UL>

<P><STRONG><a name="[1a2]"></a>port_stack_init</STRONG> (Thumb, 168 bytes, Stack size 20 bytes, port.o(i.port_stack_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = port_stack_init
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>

<P><STRONG><a name="[180]"></a>port_system_error_process</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, port_error_process.o(i.port_system_error_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enter_interrupt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_stack_check
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx_chg_pri
</UL>

<P><STRONG><a name="[189]"></a>raw_block_allocate</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, raw_block.o(i.raw_block_allocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = raw_block_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_alloc
</UL>

<P><STRONG><a name="[1b3]"></a>raw_block_pool_create</STRONG> (Thumb, 126 bytes, Stack size 28 bytes, raw_block.o(i.raw_block_pool_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = raw_block_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_init
</UL>

<P><STRONG><a name="[18a]"></a>raw_block_release</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, raw_block.o(i.raw_block_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = raw_block_release
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_cache_refresh
</UL>

<P><STRONG><a name="[137]"></a>raw_disable_sche</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, raw_task.o(i.raw_disable_sche))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = raw_disable_sche
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[138]"></a>raw_enable_sche</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, raw_task.o(i.raw_enable_sche))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>

<P><STRONG><a name="[b8]"></a>raw_enter_interrupt</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, raw_system.o(i.raw_enter_interrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = raw_enter_interrupt &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_system_error_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ba]"></a>raw_finish_int</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, raw_system.o(i.raw_finish_int))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = raw_finish_int &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_int_switch
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_isr_stack_check
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_task
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[18e]"></a>raw_idle_coroutine_hook</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, port_hook.o(i.raw_idle_coroutine_hook))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_task
</UL>

<P><STRONG><a name="[57]"></a>raw_idle_task</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, raw_idle.o(i.raw_idle_task))
<BR><BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_idle_coroutine_hook
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_sched.o(i.raw_os_init)
</UL>
<P><STRONG><a name="[157]"></a>raw_memcpy</STRONG> (Thumb, 90 bytes, Stack size 20 bytes, user_extension.o(i.raw_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = raw_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_copy_out
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_copy_in
</UL>

<P><STRONG><a name="[1a1]"></a>raw_memset</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, user_extension.o(i.raw_memset))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = raw_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>

<P><STRONG><a name="[129]"></a>raw_mutex_create</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, raw_mutex.o(i.raw_mutex_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = raw_mutex_create
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_init
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fifo_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[133]"></a>raw_mutex_get</STRONG> (Thumb, 330 bytes, Stack size 40 bytes, raw_mutex.o(i.raw_mutex_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = raw_mutex_get &rArr; change_internal_task_priority &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_system_error_process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_read_noblock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_lock
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[134]"></a>raw_mutex_put</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, raw_mutex.o(i.raw_mutex_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = raw_mutex_put &rArr; change_internal_task_priority &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_read_noblock
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_write
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_unlock
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[162]"></a>raw_os_init</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, raw_sched.o(i.raw_os_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + Unknown Stack Size
<LI>Call Chain = raw_os_init &rArr; tick_task_start &rArr; raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_create
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_start
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_init
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
<LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init_hook
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_start
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;run_queue_init
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[194]"></a>raw_os_init_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(i.raw_os_init_hook))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[164]"></a>raw_os_start</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, raw_sched.o(i.raw_os_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = raw_os_start &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_start_first_task
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_task
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18f]"></a>raw_pend_object</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, raw_pend.o(i.raw_pend_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_priority_list
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
</UL>

<P><STRONG><a name="[4]"></a>raw_printf</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, simple_printf.o(i.raw_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = raw_printf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_unlock
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;simple_printf_lock
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mpu_task
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_shell_task
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uart_task
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_version
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_state
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_port.o(.data)
</UL>
<P><STRONG><a name="[1b2]"></a>raw_queue_size_create</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, raw_queue_size.o(i.raw_queue_size_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = raw_queue_size_create
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_init
</UL>

<P><STRONG><a name="[19b]"></a>raw_queue_size_end_post</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, raw_queue_size.o(i.raw_queue_size_end_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 148 + Unknown Stack Size
<LI>Call Chain = raw_queue_size_end_post &rArr; msg_size_post &rArr; wake_send_msg_size &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_append
</UL>

<P><STRONG><a name="[127]"></a>raw_queue_size_get_information</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, raw_queue_size.o(i.raw_queue_size_get_information))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = raw_queue_size_get_information
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_cahce_empty
</UL>

<P><STRONG><a name="[19c]"></a>raw_queue_size_receive</STRONG> (Thumb, 266 bytes, Stack size 32 bytes, raw_queue_size.o(i.raw_queue_size_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = raw_queue_size_receive &rArr; raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_cache_refresh
</UL>

<P><STRONG><a name="[17f]"></a>raw_sched</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, raw_sched.o(i.raw_sched))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_task_switch
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ready_task
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_enable_sche
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
</UL>

<P><STRONG><a name="[1a6]"></a>raw_semaphore_create</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, raw_sem.o(i.raw_semaphore_create))
<BR><BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mpu_task
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uart_task
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_create
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
</UL>

<P><STRONG><a name="[c8]"></a>raw_semaphore_get</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, raw_sem.o(i.raw_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = raw_semaphore_get &rArr; raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uart_task
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_Receive_T
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_task
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_get
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[cc]"></a>raw_semaphore_put</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, raw_sem.o(i.raw_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mpu_task
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uartx_RxInt
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_put
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_timer_task
</UL>

<P><STRONG><a name="[19f]"></a>raw_semaphore_set</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, raw_sem.o(i.raw_semaphore_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = raw_semaphore_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[118]"></a>raw_sleep</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, raw_task.o(i.raw_sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = raw_sleep &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_state_post_process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mpu_task
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_init
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[66]"></a>raw_stack_check</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, raw_stat.o(i.raw_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = raw_stack_check &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_system_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[1b6]"></a>raw_sys_tick_init</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, port.o(i.raw_sys_tick_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = raw_sys_tick_init
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[11d]"></a>raw_task_create</STRONG> (Thumb, 322 bytes, Stack size 56 bytes, raw_task.o(i.raw_task_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_create_hook
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_memset
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_stack_init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uart_init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_mpu_init
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_motor_init
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_init
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shell_init
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_init_task
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_start
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_start
</UL>

<P><STRONG><a name="[131]"></a>raw_task_identify</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw_task.o(i.raw_task_identify))
<BR><BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_shell_task
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[11b]"></a>raw_task_resume</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, raw_task.o(i.raw_task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = raw_task_resume &rArr; task_resume &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_resume
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[1a5]"></a>raw_task_semaphore_create</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, raw_task_sem.o(i.raw_task_semaphore_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = raw_task_semaphore_create
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_start
</UL>

<P><STRONG><a name="[1a7]"></a>raw_task_semaphore_get</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, raw_task_sem.o(i.raw_task_semaphore_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = raw_task_semaphore_get &rArr; raw_semaphore_get &rArr; raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_process
</UL>

<P><STRONG><a name="[1a8]"></a>raw_task_semaphore_put</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, raw_task_sem.o(i.raw_task_semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = raw_task_semaphore_put &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_time_tick
</UL>

<P><STRONG><a name="[155]"></a>raw_task_stack_check</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, raw_task.o(i.raw_task_stack_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = raw_task_stack_check
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;do_stack
</UL>

<P><STRONG><a name="[11a]"></a>raw_task_suspend</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, raw_task.o(i.raw_task_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = raw_task_suspend &rArr; task_suspend &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_shell_task
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_init
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_init_task
</UL>

<P><STRONG><a name="[1aa]"></a>raw_tick_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(i.raw_tick_hook))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_time_tick
</UL>

<P><STRONG><a name="[b9]"></a>raw_time_tick</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, raw_system.o(i.raw_time_tick))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + Unknown Stack Size
<LI>Call Chain = raw_time_tick &rArr; raw_task_semaphore_put &rArr; raw_semaphore_put &rArr; semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_tick_hook
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_put
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_timer_task
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculate_time_slice
</UL>
<BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[195]"></a>raw_timer_init</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, raw_timer.o(i.raw_timer_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = raw_timer_init &rArr; raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_create
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[191]"></a>raw_wake_object</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, raw_pend.o(i.raw_wake_object))
<BR><BR>[Stack]<UL><LI>Max Depth = 76 + Unknown Stack Size
<LI>Call Chain = raw_wake_object &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
</UL>

<P><STRONG><a name="[f6]"></a>remove_ready_list</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, raw_pend.o(i.remove_ready_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bit_search_first_one
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_system_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;task_suspend
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
</UL>

<P><STRONG><a name="[105]"></a>run_command_repeatable</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, cli.o(i.run_command_repeatable))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = run_command_repeatable &rArr; cli_simple_run_command &rArr; process_macros
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_run_command
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_loop
</UL>

<P><STRONG><a name="[192]"></a>run_queue_init</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, raw_pend.o(i.run_queue_init))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[16d]"></a>run_self_test</STRONG> (Thumb, 148 bytes, Stack size 48 bytes, inv_mpu.o(i.run_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = run_self_test &rArr; mpu_run_self_test &rArr; mpu_set_dmp_state &rArr; mpu_set_sample_rate &rArr; mpu_lp_accel_mode &rArr; mpu_configure_fifo &rArr; set_int_enable &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_gyro_bias
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_set_accel_bias
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_gyro_sens
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_get_accel_sens
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
</UL>

<P><STRONG><a name="[19e]"></a>semaphore_put</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, raw_sem.o(i.semaphore_put))
<BR><BR>[Stack]<UL><LI>Max Depth = 100 + Unknown Stack Size
<LI>Call Chain = semaphore_put &rArr; raw_wake_object &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
</UL>

<P><STRONG><a name="[1af]"></a>serial_alloc</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, serial_fifo.o(i.serial_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = serial_alloc &rArr; raw_block_allocate
</UL>
<BR>[Calls]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_block_allocate
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_int_recv
</UL>

<P><STRONG><a name="[1b0]"></a>serial_append</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, serial_fifo.o(i.serial_append))
<BR><BR>[Stack]<UL><LI>Max Depth = 164 + Unknown Stack Size
<LI>Call Chain = serial_append &rArr; raw_queue_size_end_post &rArr; msg_size_post &rArr; wake_send_msg_size &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_end_post
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_int_recv
</UL>

<P><STRONG><a name="[12a]"></a>serial_fifo_init</STRONG> (Thumb, 196 bytes, Stack size 40 bytes, serial_fifo.o(i.serial_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = serial_fifo_init &rArr; raw_block_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_create
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_create
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_block_pool_create
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_fifo_init
</UL>

<P><STRONG><a name="[bc]"></a>serial_fifo_int_recv</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, serial_fifo.o(i.serial_fifo_int_recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = serial_fifo_int_recv &rArr; serial_append &rArr; raw_queue_size_end_post &rArr; msg_size_post &rArr; wake_send_msg_size &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_append
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[12d]"></a>serial_read</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, serial_fifo.o(i.serial_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = serial_read &rArr; serial_read_noblock &rArr; serial_fifo_cache_refresh &rArr; raw_queue_size_receive &rArr; raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_read_noblock
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_read
</UL>

<P><STRONG><a name="[1b4]"></a>serial_read_noblock</STRONG> (Thumb, 156 bytes, Stack size 40 bytes, serial_fifo.o(i.serial_read_noblock))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = serial_read_noblock &rArr; serial_fifo_cache_refresh &rArr; raw_queue_size_receive &rArr; raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_cache_refresh
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy2buf
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_read
</UL>

<P><STRONG><a name="[60]"></a>shell_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, debug_uart.o(i.shell_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = shell_init &rArr; raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.constdata)
</UL>
<P><STRONG><a name="[199]"></a>simple_printf_lock</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, simple_printf.o(i.simple_printf_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = simple_printf_lock &rArr; raw_mutex_get &rArr; change_internal_task_priority &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>

<P><STRONG><a name="[19a]"></a>simple_printf_unlock</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, simple_printf.o(i.simple_printf_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = simple_printf_unlock &rArr; raw_mutex_put &rArr; change_internal_task_priority &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>

<P><STRONG><a name="[ec]"></a>sqrt</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asin
</UL>

<P><STRONG><a name="[5f]"></a>sys_led_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sys_led.o(i.sys_led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = sys_led_init &rArr; raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>sys_motor_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, motor.o(i.sys_motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = sys_motor_init &rArr; raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>sys_mpu_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, mpu6050.o(i.sys_mpu_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = sys_mpu_init &rArr; raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>sys_uart_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, sys_uart.o(i.sys_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = sys_uart_init &rArr; raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>sys_uart_task</STRONG> (Thumb, 90 bytes, Stack size 128 bytes, sys_uart.o(i.sys_uart_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 344 + Unknown Stack Size
<LI>Call Chain = sys_uart_task &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_create
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USARTx_SendBuf
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetCmd
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_uart.o(i.sys_uart_init)
</UL>
<P><STRONG><a name="[1a3]"></a>task_create_hook</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, port_hook.o(i.task_create_hook))
<BR><BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
</UL>

<P><STRONG><a name="[1a4]"></a>task_resume</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, raw_task.o(i.task_resume))
<BR><BR>[Stack]<UL><LI>Max Depth = 60 + Unknown Stack Size
<LI>Call Chain = task_resume &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_resume
</UL>

<P><STRONG><a name="[1a9]"></a>task_suspend</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, raw_task.o(i.task_suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = task_suspend &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sched
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_suspend
</UL>

<P><STRONG><a name="[193]"></a>tick_list_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, raw_tick.o(i.tick_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[198]"></a>tick_list_insert</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, raw_tick.o(i.tick_list_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = tick_list_insert &rArr; tick_list_priority_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_priority_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
</UL>

<P><STRONG><a name="[184]"></a>tick_list_remove</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, raw_tick.o(i.tick_list_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tick_list_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>

<P><STRONG><a name="[1c1]"></a>tick_list_update</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, raw_tick.o(i.tick_list_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = tick_list_update &rArr; mutex_state_change &rArr; release_mutex &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_system_error_process
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_state_change
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_task_process
</UL>

<P><STRONG><a name="[196]"></a>tick_task_start</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, raw_tick.o(i.tick_task_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 108 + Unknown Stack Size
<LI>Call Chain = tick_task_start &rArr; raw_task_create &rArr; add_ready_list_end &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_create
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_create
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_os_init
</UL>

<P><STRONG><a name="[58]"></a>timer_task</STRONG> (Thumb, 194 bytes, Stack size 8 bytes, raw_timer.o(i.timer_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = timer_task &rArr; raw_mutex_get &rArr; change_internal_task_priority &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_get
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_remove
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_priority_insert
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_timer.o(i.raw_timer_init)
</UL>
<P><STRONG><a name="[122]"></a>tstc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cli_port.o(i.tstc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = tstc &rArr; debug_cahce_empty &rArr; raw_queue_size_get_information
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_cahce_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctrlc
</UL>

<P><STRONG><a name="[17e]"></a>wake_send_msg_size</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, raw_pend.o(i.wake_send_msg_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 84 + Unknown Stack Size
<LI>Call Chain = wake_send_msg_size &rArr; pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[56]"></a>sys_init_task</STRONG> (Thumb, 84 bytes, Stack size 0 bytes, sys_init.o(i.sys_init_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sys_init_task &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_suspend
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_resume
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_identify
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sys_tick_init
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_shell_task_obj
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_serial_init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cpu_task_init
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Config
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_init.o(i.create_init_task)
</UL>
<P><STRONG><a name="[1ba]"></a>sys_led_off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_led.o(i.sys_led_off))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
</UL>

<P><STRONG><a name="[1b9]"></a>sys_led_on</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sys_led.o(i.sys_led_on))
<BR><BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
</UL>

<P><STRONG><a name="[5a]"></a>sys_led_task</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, sys_led.o(i.sys_led_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 216 + Unknown Stack Size
<LI>Call Chain = sys_led_task &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_len_init
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_on
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_off
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sys_led.o(i.sys_led_init)
</UL>
<P><STRONG><a name="[1b8]"></a>sys_len_init</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sys_led.o(i.sys_len_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = sys_len_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_led_task
</UL>

<P><STRONG><a name="[bf]"></a>USART_Configuration</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_uart.o(i.USART_Configuration))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = USART_Configuration &rArr; sys_usart2_init &rArr; Pub_Uart_Hardware_Cfg &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_usart2_init
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_uart_task
</UL>

<P><STRONG><a name="[c1]"></a>sys_usart2_init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sys_uart.o(i.sys_usart2_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sys_usart2_init &rArr; Pub_Uart_Hardware_Cfg &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Int_Cfg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Hardware_Cfg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Nvic_Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Gpio_Output_AFPP
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Gpio_Input_INFLOATING
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Configuration
</UL>

<P><STRONG><a name="[128]"></a>debug_fifo_init</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, debug_uart.o(i.debug_fifo_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92 + Unknown Stack Size
<LI>Call Chain = debug_fifo_init &rArr; serial_fifo_init &rArr; raw_block_pool_create
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_fifo_init
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_create
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_serial_init
</UL>

<P><STRONG><a name="[53]"></a>debug_fifo_read</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, debug_uart.o(i.debug_fifo_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = debug_fifo_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_uart.o(i.USART1_IRQHandler)
</UL>
<P><STRONG><a name="[12c]"></a>debug_putchar</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, debug_uart.o(i.debug_putchar))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_write
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_putc
</UL>

<P><STRONG><a name="[59]"></a>debug_shell_task</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, debug_uart.o(i.debug_shell_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 460 + Unknown Stack Size
<LI>Call Chain = debug_shell_task &rArr; cli_loop &rArr; cli_simple_loop &rArr; cli_readline &rArr; cli_readline_into_buffer &rArr; cread_line &rArr; cmd_auto_complete &rArr; complete_cmdv &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_loop
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_suspend
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_identify
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> debug_uart.o(i.shell_init)
</UL>
<P><STRONG><a name="[12f]"></a>debug_uart_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, debug_uart.o(i.debug_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = debug_uart_init &rArr; debug_usart1_init &rArr; Pub_Uart_Hardware_Cfg &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_usart1_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_serial_init
</UL>

<P><STRONG><a name="[132]"></a>debug_usart1_init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, debug_uart.o(i.debug_usart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = debug_usart1_init &rArr; Pub_Uart_Hardware_Cfg &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Int_Cfg
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Uart_Hardware_Cfg
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Nvic_Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Gpio_Output_AFPP
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pub_Gpio_Input_INFLOATING
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_uart_init
</UL>

<P><STRONG><a name="[5c]"></a>sys_mpu_task</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, mpu6050.o(i.sys_mpu_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 360 + Unknown Stack Size
<LI>Call Chain = sys_mpu_task &rArr; mpu_dmp_get_data &rArr; dmp_read_fifo &rArr; mpu_read_fifo_stream &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_init
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_dmp_get_data
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Init
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Get_Gyroscope
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_put
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_create
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mpu6050.o(i.sys_mpu_init)
</UL>
<P><STRONG><a name="[de]"></a>accel_self_test</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, inv_mpu.o(i.accel_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = accel_self_test &rArr; get_accel_prod_shift &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmpeq
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_accel_prod_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[df]"></a>get_accel_prod_shift</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, inv_mpu.o(i.get_accel_prod_shift))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = get_accel_prod_shift &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accel_self_test
</UL>

<P><STRONG><a name="[15d]"></a>get_st_biases</STRONG> (Thumb, 1132 bytes, Stack size 64 bytes, inv_mpu.o(i.get_st_biases))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = get_st_biases &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[15e]"></a>gyro_self_test</STRONG> (Thumb, 256 bytes, Stack size 48 bytes, inv_mpu.o(i.gyro_self_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = gyro_self_test &rArr; MPU_Read_Len &rArr; MPU_IIC_Read_Byte &rArr; MPU_IIC_NAck &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Read_Len
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfrcmple
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cfcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_run_self_test
</UL>

<P><STRONG><a name="[166]"></a>set_int_enable</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, inv_mpu.o(i.set_int_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = set_int_enable &rArr; MPU_Write_Len &rArr; MPU_IIC_Wait_Ack &rArr; MPU_IIC_Stop &rArr; MPU_IIC_Delay &rArr; delay_us &rArr; raw_enable_sche &rArr; raw_sched &rArr; get_ready_task
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MPU_Write_Len
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_set_dmp_state
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mpu_configure_fifo
</UL>

<P><STRONG><a name="[14b]"></a>decode_gesture</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, inv_mpu_dmp_motion_driver.o(i.decode_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = decode_gesture
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dmp_read_fifo
</UL>

<P><STRONG><a name="[5b]"></a>sys_motor_task</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, motor.o(i.sys_motor_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = sys_motor_task &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_get
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare4
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare3
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Address Reference Count : 1]<UL><LI> motor.o(i.sys_motor_init)
</UL>
<P><STRONG><a name="[b6]"></a>SetSysClock</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SetSysClock &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[b7]"></a>SetSysClockTo72</STRONG> (Thumb, 214 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>

<P><STRONG><a name="[190]"></a>is_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw_mutex.o(i.is_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;release_mutex
</UL>

<P><STRONG><a name="[181]"></a>release_mutex</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, raw_mutex.o(i.release_mutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = release_mutex &rArr;  change_internal_task_priority (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_internal_task_priority
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_list_empty
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_mutex_put
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mutex_state_change
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mtx_chg_pri
</UL>

<P><STRONG><a name="[e8]"></a>add_to_priority_list</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, raw_pend.o(i.add_to_priority_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = add_to_priority_list
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pend_list_priority
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
</UL>

<P><STRONG><a name="[e7]"></a>bit_set</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, raw_pend.o(i.bit_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = bit_set
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
</UL>

<P><STRONG><a name="[f9]"></a>list_delete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, raw_pend.o(i.list_delete))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_ready_list
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;change_pend_list_priority
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pend_task_wake_up
</UL>

<P><STRONG><a name="[e6]"></a>list_insert</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, raw_pend.o(i.list_insert))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_to_ready_list_end
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_head
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list_end
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_to_priority_list
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_pend_object
</UL>

<P><STRONG><a name="[183]"></a>pend_task_wake_up</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, raw_pend.o(i.pend_task_wake_up))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + Unknown Stack Size
<LI>Call Chain = pend_task_wake_up &rArr; add_ready_list &rArr; add_ready_list_head &rArr; bit_set
</UL>
<BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;add_ready_list
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_delete
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;port_system_error_process
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wake_send_msg_size
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_wake_object
</UL>

<P><STRONG><a name="[17d]"></a>is_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw_queue_size.o(i.is_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;msg_size_post
</UL>

<P><STRONG><a name="[1a0]"></a>is_list_empty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, raw_sem.o(i.is_list_empty))
<BR><BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;semaphore_put
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_semaphore_set
</UL>

<P><STRONG><a name="[55]"></a>cpu_task</STRONG> (Thumb, 116 bytes, Stack size 0 bytes, raw_stat.o(i.cpu_task))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = cpu_task &rArr; raw_sleep &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Save
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_CPU_SR_Restore
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_stat.o(i.cpu_task_start)
</UL>
<P><STRONG><a name="[1c0]"></a>list_delete</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, raw_tick.o(i.list_delete))
<BR><BR>[Called By]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_remove
</UL>

<P><STRONG><a name="[1bf]"></a>tick_list_priority_insert</STRONG> (Thumb, 76 bytes, Stack size 20 bytes, raw_tick.o(i.tick_list_priority_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = tick_list_priority_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_insert
</UL>

<P><STRONG><a name="[5e]"></a>tick_task_process</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, raw_tick.o(i.tick_task_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = tick_task_process &rArr; raw_task_semaphore_get &rArr; raw_semaphore_get &rArr; raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tick_list_update
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_semaphore_get
</UL>
<BR>[Address Reference Count : 1]<UL><LI> raw_tick.o(i.tick_task_start)
</UL>
<P><STRONG><a name="[1c2]"></a>list_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, raw_timer.o(i.list_init))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_list_init
</UL>

<P><STRONG><a name="[1ab]"></a>timer_list_init</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, raw_timer.o(i.timer_list_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = timer_list_init
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_timer_init
</UL>

<P><STRONG><a name="[1c4]"></a>timer_list_priority_insert</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, raw_timer.o(i.timer_list_priority_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = timer_list_priority_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[1c3]"></a>timer_list_remove</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, raw_timer.o(i.timer_list_remove))
<BR><BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_task
</UL>

<P><STRONG><a name="[185]"></a>print</STRONG> (Thumb, 368 bytes, Stack size 56 bytes, simple_printf.o(i.print))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = print &rArr; printi &rArr; prints &rArr; printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>

<P><STRONG><a name="[188]"></a>printchar</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, simple_printf.o(i.printchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_putc
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[187]"></a>printi</STRONG> (Thumb, 186 bytes, Stack size 72 bytes, simple_printf.o(i.printi))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = printi &rArr; prints &rArr; printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prints
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[186]"></a>prints</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, simple_printf.o(i.prints))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prints &rArr; printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printchar
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printi
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print
</UL>

<P><STRONG><a name="[1b5]"></a>copy2buf</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, serial_fifo.o(i.copy2buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = copy2buf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_read_noblock
</UL>

<P><STRONG><a name="[1b1]"></a>serial_fifo_cache_refresh</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, serial_fifo.o(i.serial_fifo_cache_refresh))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = serial_fifo_cache_refresh &rArr; raw_queue_size_receive &rArr; raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_queue_size_receive
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_block_release
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;serial_read_noblock
</UL>

<P><STRONG><a name="[156]"></a>fifo_copy_in</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, fifo.o(i.fifo_copy_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = fifo_copy_in &rArr; raw_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_in
</UL>

<P><STRONG><a name="[158]"></a>fifo_unused</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fifo.o(i.fifo_unused))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_in
</UL>

<P><STRONG><a name="[15b]"></a>internal_fifo_out_peek</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, fifo.o(i.internal_fifo_out_peek))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = internal_fifo_out_peek &rArr; kfifo_copy_out &rArr; raw_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;kfifo_copy_out
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_out_all
</UL>

<P><STRONG><a name="[15a]"></a>is_power_of_2</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, fifo.o(i.is_power_of_2))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifo_init
</UL>

<P><STRONG><a name="[15f]"></a>kfifo_copy_out</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, fifo.o(i.kfifo_copy_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = kfifo_copy_out &rArr; raw_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;internal_fifo_out_peek
</UL>

<P><STRONG><a name="[3]"></a>cli_getc</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, cli_port.o(i.cli_getc))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = cli_getc &rArr; debug_read &rArr; serial_read &rArr; serial_read_noblock &rArr; serial_fifo_cache_refresh &rArr; raw_queue_size_receive &rArr; raw_pend_object &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_read
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_port.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>cli_putc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, cli_port.o(i.cli_putc))
<BR>[Address Reference Count : 1]<UL><LI> cli_port.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>cli_putnstr</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, cli_port.o(i.cli_putnstr))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = cli_putnstr &rArr; debug_write &rArr; raw_mutex_get &rArr; change_internal_task_priority &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_write
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_port.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>cli_puts</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, cli_port.o(i.cli_puts))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = cli_puts &rArr; debug_write &rArr; raw_mutex_get &rArr; change_internal_task_priority &rArr; remove_ready_list &rArr; port_system_error_process
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cli_port.o(.data)
</UL>
<P><STRONG><a name="[11e]"></a>cread_add_char</STRONG> (Thumb, 176 bytes, Stack size 32 bytes, cli_readline.o(i.cread_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cread_add_char &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_str
</UL>

<P><STRONG><a name="[120]"></a>cread_add_str</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, cli_readline.o(i.cread_add_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = cread_add_str &rArr; cread_add_char &rArr; __aeabi_memmove
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_char
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[121]"></a>cread_add_to_hist</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, cli_readline.o(i.cread_add_to_hist))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = cread_add_to_hist
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[102]"></a>cread_line</STRONG> (Thumb, 1302 bytes, Stack size 88 bytes, cli_readline.o(i.cread_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + Unknown Stack Size
<LI>Call Chain = cread_line &rArr; cmd_auto_complete &rArr; complete_cmdv &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_sleep
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_prev
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hist_next
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_to_hist
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_str
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_add_char
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tstc
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_readline_into_buffer
</UL>

<P><STRONG><a name="[101]"></a>hist_init</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, cli_readline.o(i.hist_init))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_readline_into_buffer
</UL>

<P><STRONG><a name="[124]"></a>hist_next</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, cli_readline.o(i.hist_next))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[123]"></a>hist_prev</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, cli_readline.o(i.hist_prev))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cread_line
</UL>

<P><STRONG><a name="[103]"></a>bootretry_reset_cmd_timeout</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, cli_simple.o(i.bootretry_reset_cmd_timeout))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_loop
</UL>

<P><STRONG><a name="[108]"></a>process_macros</STRONG> (Thumb, 324 bytes, Stack size 120 bytes, cli_simple.o(i.process_macros))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = process_macros
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_simple_run_command
</UL>

<P><STRONG><a name="[113]"></a>cmd_call</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, command.o(i.cmd_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = cmd_call
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[10e]"></a>complete_cmdv</STRONG> (Thumb, 302 bytes, Stack size 72 bytes, command.o(i.complete_cmdv))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = complete_cmdv &rArr; find_cmd &rArr; find_cmd_tbl &rArr; strncmp
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ll_entry_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ll_entry_count
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_cmd
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
</UL>

<P><STRONG><a name="[10f]"></a>find_common_prefix</STRONG> (Thumb, 78 bytes, Stack size 32 bytes, command.o(i.find_common_prefix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = find_common_prefix
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
</UL>

<P><STRONG><a name="[112]"></a>get_timer</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, command.o(i.get_timer))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_process
</UL>

<P><STRONG><a name="[10d]"></a>make_argv</STRONG> (Thumb, 86 bytes, Stack size 12 bytes, command.o(i.make_argv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = make_argv
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
</UL>

<P><STRONG><a name="[110]"></a>print_argv</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, command.o(i.print_argv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = print_argv
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmd_auto_complete
</UL>

<P><STRONG><a name="[5]"></a>do_help</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, cmds.o(i.do_help))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = do_help &rArr; _do_help &rArr; ctrlc &rArr; tstc &rArr; debug_cahce_empty &rArr; raw_queue_size_get_information
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ll_entry_start
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ll_entry_count
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_do_help
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmds.o(.data)
</UL>
<P><STRONG><a name="[6]"></a>do_reboot</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, cmds.o(i.do_reboot))
<BR>[Address Reference Count : 1]<UL><LI> cmds.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>do_stack</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, cmds.o(i.do_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = do_stack &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_task_stack_check
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmds.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>do_state</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, cmds.o(i.do_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = do_state &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmds.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>do_version</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, cmds.o(i.do_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = do_version &rArr; raw_printf &rArr; print &rArr; printi &rArr; prints &rArr; printchar &rArr; debug_putc
</UL>
<BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;raw_printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cmds.o(.data)
</UL>
<P><STRONG><a name="[ce]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[dd]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[dc]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
